/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API.
It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.

# Information

‚ö° Jikan is powered by its awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)

## Rate Limiting

| Duration | Requests |
|----|----|
| Daily | **Unlimited** |
| Per Minute | 60 requests |
| Per Second | 3 requests |

Note: It's still possible to get rate limited from MyAnimeList.net instead.


## JSON Notes
- Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`.
- Any array or object property whose value does not exist or is undetermined, will be empty.
- Any `score` property whose value does not exist or is undetermined, will be `0`.
- All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone

## Caching
By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.

All requests are cached for **24 hours**.

The following response headers will detail cache information.

| Header | Remarks |
| ---- | ---- |
| `Expires` | Cache expiry date |
| `Last-Modified` | Cache set date |
| `X-Request-Fingerprint` | Unique request fingerprint (only for cachable requests, not queries) |


Note: `X-Request-Fingerprint` will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.
They won't be available on pages which perform queries, like /anime, or /top/anime, etc.

## Allowed HTTP(s) requests

**Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list.
Only GET requests are supported which return READ-ONLY data.

## HTTP Responses

All error responses are accompanied by a JSON Error response.

| Exception | HTTP Status | Remarks |
| ---- | ---- | ---- |
| N/A | `200 - OK` | The request was successful |
| N/A | `304 - Not Modified` | You have the latest data (Cache Validation response) |
| `BadRequestException`,`ValidationException` | `400 - Bad Request` | You've made an invalid request. Recheck documentation |
| `BadResponseException` | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` |
| `BadRequestException` | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed |
| `RateLimitException` | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) |
| `UpstreamException`,`ParserException`,etc. | `500 - Internal Server Error` | Something didn't work. Try again later. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue |
| `ServiceUnavailableException` | `503 - Service Unavailable` | In most cases this is intentionally done if the service is down for maintenance. |

## JSON Error Response

```json
 {
     "status": 500,
     "type": "InternalException",
     "message": "Exception Message",
     "error": "Exception Trace",
     "report_url": "https://github.com..."
  }
```

| Property | Remarks |
| ---- | ---- |
| `status` | Returned HTTP Status Code |
| `type` | Thrown Exception |
| `message` | Human-readable error message |
| `error` | Error response and trace from the API |
| `report_url` | Clicking this would redirect you to a generated GitHub issue |


## Cache Validation

- All requests return a `ETag` header which is an MD5 hash of the response
- You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header
- You will get a HTTP `304 - Not Modified` response if the content has not changed
- If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response

![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')

## Disclaimer

- Jikan is not affiliated with MyAnimeList.net.
- Jikan is a free, open-source API. Please use it responsibly.

----

By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.

[v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 * OpenAPI spec version: 4.0.0
 */
import { jikanInstance } from './axios.instance';
/**
 * User's anime list status filter options
 */
export type UserAnimeListStatusFilter = typeof UserAnimeListStatusFilter[keyof typeof UserAnimeListStatusFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserAnimeListStatusFilter = {
  all: 'all',
  watching: 'watching',
  completed: 'completed',
  onhold: 'onhold',
  dropped: 'dropped',
  plantowatch: 'plantowatch',
} as const;

/**
 * Available Anime order_by properties
 */
export type AnimeSearchQueryOrderby = typeof AnimeSearchQueryOrderby[keyof typeof AnimeSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSearchQueryOrderby = {
  mal_id: 'mal_id',
  title: 'title',
  start_date: 'start_date',
  end_date: 'end_date',
  episodes: 'episodes',
  score: 'score',
  scored_by: 'scored_by',
  rank: 'rank',
  popularity: 'popularity',
  members: 'members',
  favorites: 'favorites',
} as const;

/**
 * Available Anime audience ratings<br><br><b>Ratings</b><br><ul><li>G - All Ages</li><li>PG - Children</li><li>PG-13 - Teens 13 or older</li><li>R - 17+ (violence & profanity)</li><li>R+ - Mild Nudity</li><li>Rx - Hentai</li></ul>
 */
export type AnimeSearchQueryRating = typeof AnimeSearchQueryRating[keyof typeof AnimeSearchQueryRating];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSearchQueryRating = {
  g: 'g',
  pg: 'pg',
  pg13: 'pg13',
  r17: 'r17',
  r: 'r',
  rx: 'rx',
} as const;

/**
 * Available Anime statuses
 */
export type AnimeSearchQueryStatus = typeof AnimeSearchQueryStatus[keyof typeof AnimeSearchQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSearchQueryStatus = {
  airing: 'airing',
  complete: 'complete',
  upcoming: 'upcoming',
} as const;

/**
 * Available Anime types
 */
export type AnimeSearchQueryType = typeof AnimeSearchQueryType[keyof typeof AnimeSearchQueryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSearchQueryType = {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  special: 'special',
  ona: 'ona',
  music: 'music',
  cm: 'cm',
  pv: 'pv',
  tv_special: 'tv_special',
} as const;

/**
 * Available Character order_by properties
 */
export type CharactersSearchQueryOrderby = typeof CharactersSearchQueryOrderby[keyof typeof CharactersSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CharactersSearchQueryOrderby = {
  mal_id: 'mal_id',
  name: 'name',
  favorites: 'favorites',
} as const;

/**
 * Club Search Query Category
 */
export type ClubSearchQueryCategory = typeof ClubSearchQueryCategory[keyof typeof ClubSearchQueryCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubSearchQueryCategory = {
  anime: 'anime',
  manga: 'manga',
  actors_and_artists: 'actors_and_artists',
  characters: 'characters',
  cities_and_neighborhoods: 'cities_and_neighborhoods',
  companies: 'companies',
  conventions: 'conventions',
  games: 'games',
  japan: 'japan',
  music: 'music',
  other: 'other',
  schools: 'schools',
} as const;

/**
 * Club Search Query OrderBy
 */
export type ClubSearchQueryOrderby = typeof ClubSearchQueryOrderby[keyof typeof ClubSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubSearchQueryOrderby = {
  mal_id: 'mal_id',
  name: 'name',
  members_count: 'members_count',
  created: 'created',
} as const;

/**
 * Club Search Query Type
 */
export type ClubSearchQueryType = typeof ClubSearchQueryType[keyof typeof ClubSearchQueryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubSearchQueryType = {
  public: 'public',
  private: 'private',
  secret: 'secret',
} as const;

/**
 * Users Search Query Gender.
 */
export type UsersSearchQueryGender = typeof UsersSearchQueryGender[keyof typeof UsersSearchQueryGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSearchQueryGender = {
  any: 'any',
  male: 'male',
  female: 'female',
  nonbinary: 'nonbinary',
} as const;

/**
 * Filter genres by type
 */
export type GenreQueryFilter = typeof GenreQueryFilter[keyof typeof GenreQueryFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GenreQueryFilter = {
  genres: 'genres',
  explicit_genres: 'explicit_genres',
  themes: 'themes',
  demographics: 'demographics',
} as const;

/**
 * Order by magazine data
 */
export type MagazinesQueryOrderby = typeof MagazinesQueryOrderby[keyof typeof MagazinesQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MagazinesQueryOrderby = {
  mal_id: 'mal_id',
  name: 'name',
  count: 'count',
} as const;

/**
 * User's anime list status filter options
 */
export type UserMangaListStatusFilter = typeof UserMangaListStatusFilter[keyof typeof UserMangaListStatusFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMangaListStatusFilter = {
  all: 'all',
  reading: 'reading',
  completed: 'completed',
  onhold: 'onhold',
  dropped: 'dropped',
  plantoread: 'plantoread',
} as const;

/**
 * Available Manga order_by properties
 */
export type MangaSearchQueryOrderby = typeof MangaSearchQueryOrderby[keyof typeof MangaSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaSearchQueryOrderby = {
  mal_id: 'mal_id',
  title: 'title',
  start_date: 'start_date',
  end_date: 'end_date',
  chapters: 'chapters',
  volumes: 'volumes',
  score: 'score',
  scored_by: 'scored_by',
  rank: 'rank',
  popularity: 'popularity',
  members: 'members',
  favorites: 'favorites',
} as const;

/**
 * Available Manga statuses
 */
export type MangaSearchQueryStatus = typeof MangaSearchQueryStatus[keyof typeof MangaSearchQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaSearchQueryStatus = {
  publishing: 'publishing',
  complete: 'complete',
  hiatus: 'hiatus',
  discontinued: 'discontinued',
  upcoming: 'upcoming',
} as const;

/**
 * Available Manga types
 */
export type MangaSearchQueryType = typeof MangaSearchQueryType[keyof typeof MangaSearchQueryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaSearchQueryType = {
  manga: 'manga',
  novel: 'novel',
  lightnovel: 'lightnovel',
  oneshot: 'oneshot',
  doujin: 'doujin',
  manhwa: 'manhwa',
  manhua: 'manhua',
} as const;

/**
 * Available People order_by properties
 */
export type PeopleSearchQueryOrderby = typeof PeopleSearchQueryOrderby[keyof typeof PeopleSearchQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PeopleSearchQueryOrderby = {
  mal_id: 'mal_id',
  name: 'name',
  birthday: 'birthday',
  favorites: 'favorites',
} as const;

/**
 * Producers Search Query Order By
 */
export type ProducersQueryOrderby = typeof ProducersQueryOrderby[keyof typeof ProducersQueryOrderby];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProducersQueryOrderby = {
  mal_id: 'mal_id',
  count: 'count',
  favorites: 'favorites',
  established: 'established',
} as const;

/**
 * Search query sort direction
 */
export type SearchQuerySort = typeof SearchQuerySort[keyof typeof SearchQuerySort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchQuerySort = {
  desc: 'desc',
  asc: 'asc',
} as const;

/**
 * Top items filter types
 */
export type TopAnimeFilter = typeof TopAnimeFilter[keyof typeof TopAnimeFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TopAnimeFilter = {
  airing: 'airing',
  upcoming: 'upcoming',
  bypopularity: 'bypopularity',
  favorite: 'favorite',
} as const;

/**
 * Top items filter types
 */
export type TopMangaFilter = typeof TopMangaFilter[keyof typeof TopMangaFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TopMangaFilter = {
  publishing: 'publishing',
  upcoming: 'upcoming',
  bypopularity: 'bypopularity',
  favorite: 'favorite',
} as const;

/**
 * The type of reviews to filter by. Defaults to anime.
 */
export type TopReviewsTypeEnum = typeof TopReviewsTypeEnum[keyof typeof TopReviewsTypeEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TopReviewsTypeEnum = {
  anime: 'anime',
  manga: 'manga',
} as const;

/**
 * Aggregated episode score (1.00 - 5.00) based on MyAnimeList user voting
 * @minimum 1
 * @maximum 5
 * @nullable
 */
export type AnimeEpisodesAllOfDataItemScore = unknown | null;

export type AnimeEpisodesAllOfDataItem = {
  /** MyAnimeList ID */
  mal_id?: number;
  /**
   * MyAnimeList URL. This is the URL of the episode's video. If there is no video url, this will be null.
   * @nullable
   */
  url?: string | null;
  /** Title */
  title?: string;
  /**
   * Title Japanese
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * title_romanji
   * @nullable
   */
  title_romanji?: string | null;
  /**
   * Aired Date ISO8601
   * @nullable
   */
  aired?: string | null;
  /**
   * Aggregated episode score (1.00 - 5.00) based on MyAnimeList user voting
   * @minimum 1
   * @maximum 5
   * @nullable
   */
  score?: AnimeEpisodesAllOfDataItemScore;
  /** Filler episode */
  filler?: boolean;
  /** Recap episode */
  recap?: boolean;
  /**
   * Episode discussion forum URL
   * @nullable
   */
  forum_url?: string | null;
};

export type AnimeEpisodesAllOf = {
  data?: AnimeEpisodesAllOfDataItem[];
};

/**
 * Anime Episodes Resource
 */
export type AnimeEpisodes = AnimeEpisodesAllOf & Pagination;

/**
 * Anime News Resource
 */
export type AnimeNews = Pagination & News;

export type AnimeVideosEpisodesAllOfDataItem = {
  /** MyAnimeList ID or Episode Number */
  mal_id?: number;
  /** Episode Title */
  title?: string;
  /** Episode Subtitle */
  episode?: string;
  /** Episode Page URL */
  url?: string;
  images?: CommonImages;
};

export type AnimeVideosEpisodesAllOf = {
  data?: AnimeVideosEpisodesAllOfDataItem[];
};

/**
 * Anime Videos Episodes Resource
 */
export type AnimeVideosEpisodes = AnimeVideosEpisodesAllOf & Pagination;

export type CharacterPicturesDataItem = {
  /**
   * Default JPG Image Size URL
   * @nullable
   */
  image_url?: string | null;
  /**
   * Large JPG Image Size URL
   * @nullable
   */
  large_image_url?: string | null;
};

/**
 * Character Pictures
 */
export interface CharacterPictures {
  data?: CharacterPicturesDataItem[];
}

export type ClubMemberDataItem = {
  /** User's username */
  username?: string;
  /** User URL */
  url?: string;
  images?: UserImages;
};

/**
 * Club Member
 */
export interface ClubMember {
  data?: ClubMemberDataItem[];
}

/**
 * Manga News Resource
 */
export type MangaNews = Pagination & News;

/**
 * Manga Pictures
 */
export interface MangaPictures {
  data?: MangaImages[];
}

/**
 * Character Pictures
 */
export interface PersonPictures {
  data?: PeopleImages[];
}

export type RandomDataItem = Anime | Manga | Character | Person;

/**
 * Random Resources
 */
export interface Random {
  data?: RandomDataItem[];
}

export type SchedulesAllOf = {
  data?: Anime[];
};

/**
 * Anime resources currently airing
 */
export type Schedules = SchedulesAllOf & PaginationPlus;

export type UsersSearchAllOfDataItem = {
  /** MyAnimeList URL */
  url?: string;
  /** MyAnimeList Username */
  username?: string;
  images?: UserImages;
  /** Last Online Date ISO8601 */
  last_online?: string;
};

export type UsersSearchAllOf = {
  data?: UsersSearchAllOfDataItem[];
};

/**
 * User Results
 */
export type UsersSearch = UsersSearchAllOf & Pagination;

export type SeasonsDataItem = {
  /** Year */
  year?: number;
  /** List of available seasons */
  seasons?: string[];
};

/**
 * List of available seasons
 */
export interface Seasons {
  data?: SeasonsDataItem[];
}

export type ReviewsCollectionDataItem = AnimeReview | MangaReview;

/**
 * Anime & Manga Reviews Resource
 */
export interface ReviewsCollection {
  data?: ReviewsCollectionDataItem[];
}

export type UserFriendsAllOfDataItemAllOf = {
  user?: UserMeta;
};

export type UserFriendsAllOfDataItemAllOfTwo = {
  /** Last Online Date ISO8601 format */
  last_online?: string;
  /** Friends Since Date ISO8601 format */
  friends_since?: string;
};

export type UserFriendsAllOfDataItem = UserFriendsAllOfDataItemAllOf & UserFriendsAllOfDataItemAllOfTwo;

export type UserFriendsAllOf = {
  data?: UserFriendsAllOfDataItem[];
};

/**
 * User Friends
 */
export type UserFriends = UserFriendsAllOf & Pagination;

export type UserClubsAllOfDataItem = {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Club Name */
  name?: string;
  /** Club URL */
  url?: string;
};

export type UserClubsAllOf = {
  data?: UserClubsAllOfDataItem[];
};

/**
 * User Clubs
 */
export type UserClubs = UserClubsAllOf & Pagination;

export type WatchEpisodesAllOfDataItemEpisodesItem = {
  /** MyAnimeList ID */
  mal_id?: string;
  /** MyAnimeList URL */
  url?: string;
  /** Episode Title */
  title?: string;
  /** For MyAnimeList Premium Users */
  premium?: boolean;
};

export type WatchEpisodesAllOfDataItem = {
  entry?: AnimeMeta;
  /** Recent Episodes (max 2 listed) */
  episodes?: WatchEpisodesAllOfDataItemEpisodesItem[];
  /** Region Locked Episode */
  region_locked?: boolean;
};

export type WatchEpisodesAllOf = {
  data?: WatchEpisodesAllOfDataItem[];
};

/**
 * Watch Episodes
 */
export type WatchEpisodes = WatchEpisodesAllOf & Pagination;

export type WatchPromosAllOfAllOf = {
  /** Promo Title */
  title?: string;
};

export type WatchPromosAllOfAllOfTwoDataItem = {
  entry?: AnimeMeta;
  trailer?: Trailer[];
};

export type WatchPromosAllOfAllOfTwo = {
  data?: WatchPromosAllOfAllOfTwoDataItem[];
};

export type WatchPromosAllOf = WatchPromosAllOfAllOf & WatchPromosAllOfAllOfTwo;

/**
 * Watch Promos
 */
export type WatchPromos = Pagination & WatchPromosAllOf;

/**
 * Character details
 */
export type AnimeCharactersDataItemCharacter = {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: CharacterImages;
  /** Character Name */
  name?: string;
};

export type AnimeCharactersDataItemVoiceActorsItemPerson = {
  mal_id?: number;
  url?: string;
  images?: PeopleImages;
  name?: string;
};

export type AnimeCharactersDataItemVoiceActorsItem = {
  person?: AnimeCharactersDataItemVoiceActorsItemPerson;
  language?: string;
};

export type AnimeCharactersDataItem = {
  /** Character details */
  character?: AnimeCharactersDataItemCharacter;
  /** Character's Role */
  role?: string;
  voice_actors?: AnimeCharactersDataItemVoiceActorsItem[];
};

/**
 * Anime Characters Resource
 */
export interface AnimeCharacters {
  data?: AnimeCharactersDataItem[];
}

export type AnimeSearchAllOf = {
  data?: Anime[];
};

/**
 * Anime Collection Resource
 */
export type AnimeSearch = AnimeSearchAllOf & PaginationPlus;

/**
 * Anime Episode Resource
 */
export interface AnimeEpisode {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /** Title */
  title?: string;
  /**
   * Title Japanese
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * title_romanji
   * @nullable
   */
  title_romanji?: string | null;
  /**
   * Episode duration in seconds
   * @nullable
   */
  duration?: number | null;
  /**
   * Aired Date ISO8601
   * @nullable
   */
  aired?: string | null;
  /** Filler episode */
  filler?: boolean;
  /** Recap episode */
  recap?: boolean;
  /**
   * Episode Synopsis
   * @nullable
   */
  synopsis?: string | null;
}

/**
 * Anime Type
 * @nullable
 */
export type AnimeFullType = typeof AnimeFullType[keyof typeof AnimeFullType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeFullType = {
  TV: 'TV',
  OVA: 'OVA',
  Movie: 'Movie',
  Special: 'Special',
  ONA: 'ONA',
  Music: 'Music',
} as const;

/**
 * Airing status
 * @nullable
 */
export type AnimeFullStatus = typeof AnimeFullStatus[keyof typeof AnimeFullStatus] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeFullStatus = {
  Finished_Airing: 'Finished Airing',
  Currently_Airing: 'Currently Airing',
  Not_yet_aired: 'Not yet aired',
} as const;

/**
 * Anime audience rating
 * @nullable
 */
export type AnimeFullRating = typeof AnimeFullRating[keyof typeof AnimeFullRating] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeFullRating = {
  'G_-_All_Ages': 'G - All Ages',
  'PG_-_Children': 'PG - Children',
  'PG-13_-_Teens_13_or_older': 'PG-13 - Teens 13 or older',
  'R_-_17+_(violence_&_profanity)': 'R - 17+ (violence & profanity)',
  'R+_-_Mild_Nudity': 'R+ - Mild Nudity',
  'Rx_-_Hentai': 'Rx - Hentai',
} as const;

/**
 * Season
 * @nullable
 */
export type AnimeFullSeason = typeof AnimeFullSeason[keyof typeof AnimeFullSeason] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeFullSeason = {
  summer: 'summer',
  winter: 'winter',
  spring: 'spring',
  fall: 'fall',
} as const;

export type AnimeFullRelationsItem = {
  /** Relation type */
  relation?: string;
  entry?: MalUrl[];
};

export type AnimeFullTheme = {
  openings?: string[];
  endings?: string[];
};

export type AnimeFullExternalItem = {
  name?: string;
  url?: string;
};

export type AnimeFullStreamingItem = {
  name?: string;
  url?: string;
};

/**
 * Full anime Resource
 */
export interface AnimeFull {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: AnimeImages;
  trailer?: TrailerBase;
  /** Whether the entry is pending approval on MAL or not */
  approved?: boolean;
  /** All titles */
  titles?: Title[];
  /**
   * Title
   * @deprecated
   */
  title?: string;
  /**
   * English Title
   * @deprecated
   * @nullable
   */
  title_english?: string | null;
  /**
   * Japanese Title
   * @deprecated
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * Other Titles
   * @deprecated
   */
  title_synonyms?: string[];
  /**
   * Anime Type
   * @nullable
   */
  type?: AnimeFullType;
  /**
   * Original Material/Source adapted from
   * @nullable
   */
  source?: string | null;
  /**
   * Episode count
   * @nullable
   */
  episodes?: number | null;
  /**
   * Airing status
   * @nullable
   */
  status?: AnimeFullStatus;
  /** Airing boolean */
  airing?: boolean;
  aired?: Daterange;
  /**
   * Parsed raw duration
   * @nullable
   */
  duration?: string | null;
  /**
   * Anime audience rating
   * @nullable
   */
  rating?: AnimeFullRating;
  /**
   * Score
   * @nullable
   */
  score?: number | null;
  /**
   * Number of users
   * @nullable
   */
  scored_by?: number | null;
  /**
   * Ranking
   * @nullable
   */
  rank?: number | null;
  /**
   * Popularity
   * @nullable
   */
  popularity?: number | null;
  /**
   * Number of users who have added this entry to their list
   * @nullable
   */
  members?: number | null;
  /**
   * Number of users who have favorited this entry
   * @nullable
   */
  favorites?: number | null;
  /**
   * Synopsis
   * @nullable
   */
  synopsis?: string | null;
  /**
   * Background
   * @nullable
   */
  background?: string | null;
  /**
   * Season
   * @nullable
   */
  season?: AnimeFullSeason;
  /**
   * Year
   * @nullable
   */
  year?: number | null;
  broadcast?: Broadcast;
  producers?: MalUrl[];
  licensors?: MalUrl[];
  studios?: MalUrl[];
  genres?: MalUrl[];
  explicit_genres?: MalUrl[];
  themes?: MalUrl[];
  demographics?: MalUrl[];
  relations?: AnimeFullRelationsItem[];
  theme?: AnimeFullTheme;
  external?: AnimeFullExternalItem[];
  streaming?: AnimeFullStreamingItem[];
}

export type AnimeRelationsDataItem = {
  /** Relation type */
  relation?: string;
  entry?: MalUrl[];
};

/**
 * Anime Relations
 */
export interface AnimeRelations {
  data?: AnimeRelationsDataItem[];
}

/**
 * Anime Type
 * @nullable
 */
export type AnimeType = typeof AnimeType[keyof typeof AnimeType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeType = {
  TV: 'TV',
  OVA: 'OVA',
  Movie: 'Movie',
  Special: 'Special',
  ONA: 'ONA',
  Music: 'Music',
} as const;

/**
 * Airing status
 * @nullable
 */
export type AnimeStatus = typeof AnimeStatus[keyof typeof AnimeStatus] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeStatus = {
  Finished_Airing: 'Finished Airing',
  Currently_Airing: 'Currently Airing',
  Not_yet_aired: 'Not yet aired',
} as const;

/**
 * Anime audience rating
 * @nullable
 */
export type AnimeRating = typeof AnimeRating[keyof typeof AnimeRating] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeRating = {
  'G_-_All_Ages': 'G - All Ages',
  'PG_-_Children': 'PG - Children',
  'PG-13_-_Teens_13_or_older': 'PG-13 - Teens 13 or older',
  'R_-_17+_(violence_&_profanity)': 'R - 17+ (violence & profanity)',
  'R+_-_Mild_Nudity': 'R+ - Mild Nudity',
  'Rx_-_Hentai': 'Rx - Hentai',
} as const;

/**
 * Season
 * @nullable
 */
export type AnimeSeason = typeof AnimeSeason[keyof typeof AnimeSeason] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnimeSeason = {
  summer: 'summer',
  winter: 'winter',
  spring: 'spring',
  fall: 'fall',
} as const;

/**
 * Anime Resource
 */
export interface Anime {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: AnimeImages;
  trailer?: TrailerBase;
  /** Whether the entry is pending approval on MAL or not */
  approved?: boolean;
  /** All titles */
  titles?: Title[];
  /**
   * Title
   * @deprecated
   */
  title?: string;
  /**
   * English Title
   * @deprecated
   * @nullable
   */
  title_english?: string | null;
  /**
   * Japanese Title
   * @deprecated
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * Other Titles
   * @deprecated
   */
  title_synonyms?: string[];
  /**
   * Anime Type
   * @nullable
   */
  type?: AnimeType;
  /**
   * Original Material/Source adapted from
   * @nullable
   */
  source?: string | null;
  /**
   * Episode count
   * @nullable
   */
  episodes?: number | null;
  /**
   * Airing status
   * @nullable
   */
  status?: AnimeStatus;
  /** Airing boolean */
  airing?: boolean;
  aired?: Daterange;
  /**
   * Parsed raw duration
   * @nullable
   */
  duration?: string | null;
  /**
   * Anime audience rating
   * @nullable
   */
  rating?: AnimeRating;
  /**
   * Score
   * @nullable
   */
  score?: number | null;
  /**
   * Number of users
   * @nullable
   */
  scored_by?: number | null;
  /**
   * Ranking
   * @nullable
   */
  rank?: number | null;
  /**
   * Popularity
   * @nullable
   */
  popularity?: number | null;
  /**
   * Number of users who have added this entry to their list
   * @nullable
   */
  members?: number | null;
  /**
   * Number of users who have favorited this entry
   * @nullable
   */
  favorites?: number | null;
  /**
   * Synopsis
   * @nullable
   */
  synopsis?: string | null;
  /**
   * Background
   * @nullable
   */
  background?: string | null;
  /**
   * Season
   * @nullable
   */
  season?: AnimeSeason;
  /**
   * Year
   * @nullable
   */
  year?: number | null;
  broadcast?: Broadcast;
  producers?: MalUrl[];
  licensors?: MalUrl[];
  studios?: MalUrl[];
  genres?: MalUrl[];
  explicit_genres?: MalUrl[];
  themes?: MalUrl[];
  demographics?: MalUrl[];
}

/**
 * Person details
 */
export type AnimeStaffDataItemPerson = {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: PeopleImages;
  /** Name */
  name?: string;
};

export type AnimeStaffDataItem = {
  /** Person details */
  person?: AnimeStaffDataItemPerson;
  /** Staff Positions */
  positions?: string[];
};

/**
 * Anime Staff Resource
 */
export interface AnimeStaff {
  data?: AnimeStaffDataItem[];
}

export type AnimeStatisticsDataScoresItem = {
  /** Scoring value */
  score?: number;
  /** Number of votes for this score */
  votes?: number;
  /** Percentage of votes for this score */
  percentage?: number;
};

export type AnimeStatisticsData = {
  /** Number of users watching the resource */
  watching?: number;
  /** Number of users who have completed the resource */
  completed?: number;
  /** Number of users who have put the resource on hold */
  on_hold?: number;
  /** Number of users who have dropped the resource */
  dropped?: number;
  /** Number of users who have planned to watch the resource */
  plan_to_watch?: number;
  /** Total number of users who have the resource added to their lists */
  total?: number;
  scores?: AnimeStatisticsDataScoresItem[];
};

/**
 * Anime Statistics Resource
 */
export interface AnimeStatistics {
  data?: AnimeStatisticsData;
}

export type AnimeThemesData = {
  openings?: string[];
  endings?: string[];
};

/**
 * Anime Opening and Ending Themes
 */
export interface AnimeThemes {
  data?: AnimeThemesData;
}

export type AnimeVideosDataPromoItem = {
  /** Title */
  title?: string;
  trailer?: Trailer;
};

export type AnimeVideosDataEpisodesItem = {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /** Title */
  title?: string;
  /** Episode */
  episode?: string;
  images?: CommonImages;
};

export type AnimeVideosDataMusicVideosItemMeta = {
  /** @nullable */
  title?: string | null;
  /** @nullable */
  author?: string | null;
};

export type AnimeVideosDataMusicVideosItem = {
  /** Title */
  title?: string;
  video?: Trailer;
  meta?: AnimeVideosDataMusicVideosItemMeta;
};

export type AnimeVideosData = {
  promo?: AnimeVideosDataPromoItem[];
  episodes?: AnimeVideosDataEpisodesItem[];
  music_videos?: AnimeVideosDataMusicVideosItem[];
};

/**
 * Anime Videos Resource
 */
export interface AnimeVideos {
  data?: AnimeVideosData;
}

export type CharacterAnimeDataItem = {
  /** Character's Role */
  role?: string;
  anime?: AnimeMeta;
};

/**
 * Character casted in anime
 */
export interface CharacterAnime {
  data?: CharacterAnimeDataItem[];
}

export type CharactersSearchAllOf = {
  data?: Character[];
};

/**
 * Characters Search Resource
 */
export type CharactersSearch = CharactersSearchAllOf & PaginationPlus;

export type CharacterFullAnimeItem = {
  /** Character's Role */
  role?: string;
  anime?: AnimeMeta;
};

export type CharacterFullMangaItem = {
  /** Character's Role */
  role?: string;
  manga?: MangaMeta;
};

export type CharacterFullVoicesItem = {
  /** Character's Role */
  language?: string;
  person?: PersonMeta;
};

/**
 * Character Resource
 */
export interface CharacterFull {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: CharacterImages;
  /** Name */
  name?: string;
  /**
   * Name
   * @nullable
   */
  name_kanji?: string | null;
  /** Other Names */
  nicknames?: string[];
  /** Number of users who have favorited this entry */
  favorites?: number;
  /**
   * Biography
   * @nullable
   */
  about?: string | null;
  anime?: CharacterFullAnimeItem[];
  manga?: CharacterFullMangaItem[];
  voices?: CharacterFullVoicesItem[];
}

export type CharacterMangaDataItem = {
  /** Character's Role */
  role?: string;
  manga?: MangaMeta;
};

/**
 * Character casted in manga
 */
export interface CharacterManga {
  data?: CharacterMangaDataItem[];
}

/**
 * Character Resource
 */
export interface Character {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: CharacterImages;
  /** Name */
  name?: string;
  /**
   * Name
   * @nullable
   */
  name_kanji?: string | null;
  /** Other Names */
  nicknames?: string[];
  /** Number of users who have favorited this entry */
  favorites?: number;
  /**
   * Biography
   * @nullable
   */
  about?: string | null;
}

export type CharacterVoiceActorsDataItem = {
  /** Character's Role */
  language?: string;
  person?: PersonMeta;
};

/**
 * Character voice actors
 */
export interface CharacterVoiceActors {
  data?: CharacterVoiceActorsDataItem[];
}

export type ClubsSearchAllOf = {
  data?: Club[];
};

/**
 * Clubs Search Resource
 */
export type ClubsSearch = ClubsSearchAllOf & Pagination;

export type ClubRelationsData = {
  anime?: MalUrl[];
  manga?: MalUrl[];
  characters?: MalUrl[];
};

/**
 * Club Relations
 */
export interface ClubRelations {
  data?: ClubRelationsData;
}

/**
 * Club Category
 */
export type ClubCategory = typeof ClubCategory[keyof typeof ClubCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubCategory = {
  'actors_&_artists': 'actors & artists',
  anime: 'anime',
  characters: 'characters',
  'cities_&_neighborhoods': 'cities & neighborhoods',
  companies: 'companies',
  conventions: 'conventions',
  games: 'games',
  japan: 'japan',
  manga: 'manga',
  music: 'music',
  others: 'others',
  schools: 'schools',
} as const;

/**
 * Club access
 */
export type ClubAccess = typeof ClubAccess[keyof typeof ClubAccess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClubAccess = {
  public: 'public',
  private: 'private',
  secret: 'secret',
} as const;

/**
 * Club Resource
 */
export interface Club {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Club name */
  name?: string;
  /** Club URL */
  url?: string;
  images?: CommonImages;
  /** Number of club members */
  members?: number;
  /** Club Category */
  category?: ClubCategory;
  /** Date Created ISO8601 */
  created?: string;
  /** Club access */
  access?: ClubAccess;
}

export type ClubStaffDataItem = {
  /** User URL */
  url?: string;
  /** User's username */
  username?: string;
};

/**
 * Club Staff Resource
 */
export interface ClubStaff {
  data?: ClubStaffDataItem[];
}

/**
 * Youtube Details
 */
export type Trailer = TrailerBase & TrailerImages;

/**
 * Youtube Details
 */
export interface TrailerBase {
  /**
   * YouTube ID
   * @nullable
   */
  youtube_id?: string | null;
  /**
   * YouTube URL
   * @nullable
   */
  url?: string | null;
  /**
   * Parsed Embed URL
   * @nullable
   */
  embed_url?: string | null;
}

export type TrailerImagesImages = {
  /**
   * Default Image Size URL (120x90)
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image Size URL (640x480)
   * @nullable
   */
  small_image_url?: string | null;
  /**
   * Medium Image Size URL (320x180)
   * @nullable
   */
  medium_image_url?: string | null;
  /**
   * Large Image Size URL (480x360)
   * @nullable
   */
  large_image_url?: string | null;
  /**
   * Maximum Image Size URL (1280x720)
   * @nullable
   */
  maximum_image_url?: string | null;
};

/**
 * Youtube Images
 */
export interface TrailerImages {
  images?: TrailerImagesImages;
}

/**
 * Date Prop From
 */
export type DaterangePropFrom = {
  /**
   * Day
   * @nullable
   */
  day?: number | null;
  /**
   * Month
   * @nullable
   */
  month?: number | null;
  /**
   * Year
   * @nullable
   */
  year?: number | null;
};

/**
 * Date Prop To
 */
export type DaterangePropTo = {
  /**
   * Day
   * @nullable
   */
  day?: number | null;
  /**
   * Month
   * @nullable
   */
  month?: number | null;
  /**
   * Year
   * @nullable
   */
  year?: number | null;
};

/**
 * Date Prop
 */
export type DaterangeProp = {
  /** Date Prop From */
  from?: DaterangePropFrom;
  /** Date Prop To */
  to?: DaterangePropTo;
  /**
   * Raw parsed string
   * @nullable
   */
  string?: string | null;
};

/**
 * Date range
 */
export interface Daterange {
  /**
   * Date ISO8601
   * @nullable
   */
  from?: string | null;
  /**
   * Date ISO8601
   * @nullable
   */
  to?: string | null;
  /** Date Prop */
  prop?: DaterangeProp;
}

/**
 * Broadcast Details
 */
export interface Broadcast {
  /**
   * Day of the week
   * @nullable
   */
  day?: string | null;
  /**
   * Time in 24 hour format
   * @nullable
   */
  time?: string | null;
  /**
   * Timezone (Tz Database format https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   * @nullable
   */
  timezone?: string | null;
  /**
   * Raw parsed broadcast string
   * @nullable
   */
  string?: string | null;
}

/**
 * Parsed URL Data
 */
export interface MalUrl {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Type of resource */
  type?: string;
  /** Resource Name/Title */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
}

/**
 * Parsed URL Data
 */
export interface MalUrl2 {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Type of resource */
  type?: string;
  /** Resource Name/Title */
  title?: string;
  /** MyAnimeList URL */
  url?: string;
}

/**
 * Entry Meta data
 */
export interface EntryMeta {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /** Image URL */
  image_url?: string;
  /** Entry Name/Title */
  name?: string;
}

/**
 * Related resources
 */
export interface Relation {
  /** Relation type */
  relation?: string;
  /** Related entries */
  entry?: MalUrl[];
}

export type PaginationPagination = {
  last_visible_page?: number;
  has_next_page?: boolean;
};

export interface Pagination {
  pagination?: PaginationPagination;
}

export type PaginationPlusPaginationItems = {
  count?: number;
  total?: number;
  per_page?: number;
};

export type PaginationPlusPagination = {
  last_visible_page?: number;
  has_next_page?: boolean;
  items?: PaginationPlusPaginationItems;
};

export interface PaginationPlus {
  pagination?: PaginationPlusPagination;
}

export interface UserMeta {
  /** MyAnimeList Username */
  username?: string;
  /** MyAnimeList Profile URL */
  url?: string;
  images?: UserImages;
}

/**
 * User Meta By ID
 */
export interface UserById {
  /** MyAnimeList URL */
  url?: string;
  /** MyAnimeList Username */
  username?: string;
}

/**
 * Available images in JPG
 */
export type UserImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
};

/**
 * Available images in WEBP
 */
export type UserImagesWebp = {
  /**
   * Image URL WEBP
   * @nullable
   */
  image_url?: string | null;
};

export interface UserImages {
  /** Available images in JPG */
  jpg?: UserImagesJpg;
  /** Available images in WEBP */
  webp?: UserImagesWebp;
}

export interface AnimeMeta {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: AnimeImages;
  /** Entry title */
  title?: string;
}

export interface MangaMeta {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: MangaImages;
  /** Entry title */
  title?: string;
}

export interface CharacterMeta {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: CharacterImages;
  /** Entry name */
  name?: string;
}

export interface PersonMeta {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: PeopleImages;
  /** Entry name */
  name?: string;
}

/**
 * Available images in JPG
 */
export type AnimeImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image URL JPG
   * @nullable
   */
  small_image_url?: string | null;
  /**
   * Image URL JPG
   * @nullable
   */
  large_image_url?: string | null;
};

/**
 * Available images in WEBP
 */
export type AnimeImagesWebp = {
  /**
   * Image URL WEBP
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image URL WEBP
   * @nullable
   */
  small_image_url?: string | null;
  /**
   * Image URL WEBP
   * @nullable
   */
  large_image_url?: string | null;
};

export interface AnimeImages {
  /** Available images in JPG */
  jpg?: AnimeImagesJpg;
  /** Available images in WEBP */
  webp?: AnimeImagesWebp;
}

/**
 * Available images in JPG
 */
export type MangaImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image URL JPG
   * @nullable
   */
  small_image_url?: string | null;
  /**
   * Image URL JPG
   * @nullable
   */
  large_image_url?: string | null;
};

/**
 * Available images in WEBP
 */
export type MangaImagesWebp = {
  /**
   * Image URL WEBP
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image URL WEBP
   * @nullable
   */
  small_image_url?: string | null;
  /**
   * Image URL WEBP
   * @nullable
   */
  large_image_url?: string | null;
};

export interface MangaImages {
  /** Available images in JPG */
  jpg?: MangaImagesJpg;
  /** Available images in WEBP */
  webp?: MangaImagesWebp;
}

/**
 * Available images in JPG
 */
export type CharacterImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image URL JPG
   * @nullable
   */
  small_image_url?: string | null;
};

/**
 * Available images in WEBP
 */
export type CharacterImagesWebp = {
  /**
   * Image URL WEBP
   * @nullable
   */
  image_url?: string | null;
  /**
   * Small Image URL WEBP
   * @nullable
   */
  small_image_url?: string | null;
};

export interface CharacterImages {
  /** Available images in JPG */
  jpg?: CharacterImagesJpg;
  /** Available images in WEBP */
  webp?: CharacterImagesWebp;
}

/**
 * Available images in JPG
 */
export type PeopleImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
};

export interface PeopleImages {
  /** Available images in JPG */
  jpg?: PeopleImagesJpg;
}

/**
 * Available images in JPG
 */
export type CommonImagesJpg = {
  /**
   * Image URL JPG
   * @nullable
   */
  image_url?: string | null;
};

export interface CommonImages {
  /** Available images in JPG */
  jpg?: CommonImagesJpg;
}

export interface Title {
  /** Title type */
  type?: string;
  /** Title value */
  title?: string;
}

export type ExternalLinksDataItem = {
  name?: string;
  url?: string;
};

/**
 * External links
 */
export interface ExternalLinks {
  data?: ExternalLinksDataItem[];
}

/**
 * Last comment details
 */
export type ForumDataItemLastComment = {
  /** Last comment URL */
  url?: string;
  /** Author MyAnimeList Username */
  author_username?: string;
  /** Author Profile URL */
  author_url?: string;
  /**
   * Last comment date posted ISO8601
   * @nullable
   */
  date?: string | null;
};

export type ForumDataItem = {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /** Title */
  title?: string;
  /** Post Date ISO8601 */
  date?: string;
  /** Author MyAnimeList Username */
  author_username?: string;
  /** Author Profile URL */
  author_url?: string;
  /** Comment count */
  comments?: number;
  /** Last comment details */
  last_comment?: ForumDataItemLastComment;
};

/**
 * Forum Resource
 */
export interface Forum {
  data?: ForumDataItem[];
}

/**
 * Genres Collection Resource
 */
export interface Genres {
  data?: Genre[];
}

/**
 * Genre Resource
 */
export interface Genre {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Genre Name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
  /** Genre's entry count */
  count?: number;
}

export type MagazinesAllOf = {
  data?: Magazine[];
};

/**
 * Magazine Collection Resource
 */
export type Magazines = MagazinesAllOf & Pagination;

/**
 * Magazine Resource
 */
export interface Magazine {
  /** MyAnimeList ID */
  mal_id?: number;
  /** Magazine Name */
  name?: string;
  /** MyAnimeList URL */
  url?: string;
  /** Magazine's manga count */
  count?: number;
}

export type MangaCharactersDataItem = {
  character?: CharacterMeta;
  /** Character's Role */
  role?: string;
};

/**
 * Manga Characters Resource
 */
export interface MangaCharacters {
  data?: MangaCharactersDataItem[];
}

export type MangaSearchAllOf = {
  data?: Manga[];
};

/**
 * Manga Search Resource
 */
export type MangaSearch = MangaSearchAllOf & PaginationPlus;

/**
 * Manga Type
 * @nullable
 */
export type MangaFullType = typeof MangaFullType[keyof typeof MangaFullType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaFullType = {
  Manga: 'Manga',
  Novel: 'Novel',
  Light_Novel: 'Light Novel',
  'One-shot': 'One-shot',
  Doujinshi: 'Doujinshi',
  Manhua: 'Manhua',
  Manhwa: 'Manhwa',
  OEL: 'OEL',
} as const;

/**
 * Publishing status
 */
export type MangaFullStatus = typeof MangaFullStatus[keyof typeof MangaFullStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaFullStatus = {
  Finished: 'Finished',
  Publishing: 'Publishing',
  On_Hiatus: 'On Hiatus',
  Discontinued: 'Discontinued',
  Not_yet_published: 'Not yet published',
} as const;

export type MangaFullRelationsItem = {
  /** Relation type */
  relation?: string;
  entry?: MalUrl[];
};

export type MangaFullExternalItem = {
  name?: string;
  url?: string;
};

/**
 * Manga Resource
 */
export interface MangaFull {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: MangaImages;
  /** Whether the entry is pending approval on MAL or not */
  approved?: boolean;
  /** All Titles */
  titles?: Title[];
  /**
   * Title
   * @deprecated
   */
  title?: string;
  /**
   * English Title
   * @deprecated
   * @nullable
   */
  title_english?: string | null;
  /**
   * Japanese Title
   * @deprecated
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * Other Titles
   * @deprecated
   */
  title_synonyms?: string[];
  /**
   * Manga Type
   * @nullable
   */
  type?: MangaFullType;
  /**
   * Chapter count
   * @nullable
   */
  chapters?: number | null;
  /**
   * Volume count
   * @nullable
   */
  volumes?: number | null;
  /** Publishing status */
  status?: MangaFullStatus;
  /** Publishing boolean */
  publishing?: boolean;
  published?: Daterange;
  /**
   * Score
   * @nullable
   */
  score?: number | null;
  /**
   * Number of users
   * @nullable
   */
  scored_by?: number | null;
  /**
   * Ranking
   * @nullable
   */
  rank?: number | null;
  /**
   * Popularity
   * @nullable
   */
  popularity?: number | null;
  /**
   * Number of users who have added this entry to their list
   * @nullable
   */
  members?: number | null;
  /**
   * Number of users who have favorited this entry
   * @nullable
   */
  favorites?: number | null;
  /**
   * Synopsis
   * @nullable
   */
  synopsis?: string | null;
  /**
   * Background
   * @nullable
   */
  background?: string | null;
  authors?: MalUrl[];
  serializations?: MalUrl[];
  genres?: MalUrl[];
  explicit_genres?: MalUrl[];
  themes?: MalUrl[];
  demographics?: MalUrl[];
  relations?: MangaFullRelationsItem[];
  external?: MangaFullExternalItem[];
}

/**
 * Manga Type
 * @nullable
 */
export type MangaType = typeof MangaType[keyof typeof MangaType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaType = {
  Manga: 'Manga',
  Novel: 'Novel',
  Light_Novel: 'Light Novel',
  'One-shot': 'One-shot',
  Doujinshi: 'Doujinshi',
  Manhua: 'Manhua',
  Manhwa: 'Manhwa',
  OEL: 'OEL',
} as const;

/**
 * Publishing status
 */
export type MangaStatus = typeof MangaStatus[keyof typeof MangaStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MangaStatus = {
  Finished: 'Finished',
  Publishing: 'Publishing',
  On_Hiatus: 'On Hiatus',
  Discontinued: 'Discontinued',
  Not_yet_published: 'Not yet published',
} as const;

/**
 * Manga Resource
 */
export interface Manga {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  images?: MangaImages;
  /** Whether the entry is pending approval on MAL or not */
  approved?: boolean;
  /** All Titles */
  titles?: Title[];
  /**
   * Title
   * @deprecated
   */
  title?: string;
  /**
   * English Title
   * @deprecated
   * @nullable
   */
  title_english?: string | null;
  /**
   * Japanese Title
   * @deprecated
   * @nullable
   */
  title_japanese?: string | null;
  /**
   * Manga Type
   * @nullable
   */
  type?: MangaType;
  /**
   * Chapter count
   * @nullable
   */
  chapters?: number | null;
  /**
   * Volume count
   * @nullable
   */
  volumes?: number | null;
  /** Publishing status */
  status?: MangaStatus;
  /** Publishing boolean */
  publishing?: boolean;
  published?: Daterange;
  /**
   * Score
   * @nullable
   */
  score?: number | null;
  /**
   * Number of users
   * @nullable
   */
  scored_by?: number | null;
  /**
   * Ranking
   * @nullable
   */
  rank?: number | null;
  /**
   * Popularity
   * @nullable
   */
  popularity?: number | null;
  /**
   * Number of users who have added this entry to their list
   * @nullable
   */
  members?: number | null;
  /**
   * Number of users who have favorited this entry
   * @nullable
   */
  favorites?: number | null;
  /**
   * Synopsis
   * @nullable
   */
  synopsis?: string | null;
  /**
   * Background
   * @nullable
   */
  background?: string | null;
  authors?: MalUrl[];
  serializations?: MalUrl[];
  genres?: MalUrl[];
  explicit_genres?: MalUrl[];
  themes?: MalUrl[];
  demographics?: MalUrl[];
}

export type MangaStatisticsDataScoresItem = {
  /** Scoring value */
  score?: number;
  /** Number of votes for this score */
  votes?: number;
  /** Percentage of votes for this score */
  percentage?: number;
};

export type MangaStatisticsData = {
  /** Number of users reading the resource */
  reading?: number;
  /** Number of users who have completed the resource */
  completed?: number;
  /** Number of users who have put the resource on hold */
  on_hold?: number;
  /** Number of users who have dropped the resource */
  dropped?: number;
  /** Number of users who have planned to read the resource */
  plan_to_read?: number;
  /** Total number of users who have the resource added to their lists */
  total?: number;
  scores?: MangaStatisticsDataScoresItem[];
};

/**
 * Manga Statistics Resource
 */
export interface MangaStatistics {
  data?: MangaStatisticsData;
}

export type MoreinfoData = {
  /**
   * Additional information on the entry
   * @nullable
   */
  moreinfo?: string | null;
};

/**
 * More Info Resource
 */
export interface Moreinfo {
  data?: MoreinfoData;
}

export type NewsDataItem = {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /** Title */
  title?: string;
  /** Post Date ISO8601 */
  date?: string;
  /** Author MyAnimeList Username */
  author_username?: string;
  /** Author Profile URL */
  author_url?: string;
  /** Forum topic URL */
  forum_url?: string;
  images?: CommonImages;
  /** Comment count */
  comments?: number;
  /** Excerpt */
  excerpt?: string;
};

export interface News {
  data?: NewsDataItem[];
}

export type PersonAnimeDataItem = {
  /** Person's position */
  position?: string;
  anime?: AnimeMeta;
};

/**
 * Person anime staff positions
 */
export interface PersonAnime {
  data?: PersonAnimeDataItem[];
}

export type PeopleSearchAllOf = {
  data?: Person[];
};

/**
 * People Search
 */
export type PeopleSearch = PeopleSearchAllOf & PaginationPlus;

export type PersonFullAnimeItem = {
  /** Person's position */
  position?: string;
  anime?: AnimeMeta;
};

export type PersonFullMangaItem = {
  /** Person's position */
  position?: string;
  manga?: MangaMeta;
};

export type PersonFullVoicesItem = {
  /** Person's Character's role in the anime */
  role?: string;
  anime?: AnimeMeta;
  character?: CharacterMeta;
};

/**
 * Person Resource
 */
export interface PersonFull {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /**
   * Person's website URL
   * @nullable
   */
  website_url?: string | null;
  images?: PeopleImages;
  /** Name */
  name?: string;
  /**
   * Given Name
   * @nullable
   */
  given_name?: string | null;
  /**
   * Family Name
   * @nullable
   */
  family_name?: string | null;
  /** Other Names */
  alternate_names?: string[];
  /**
   * Birthday Date ISO8601
   * @nullable
   */
  birthday?: string | null;
  /** Number of users who have favorited this entry */
  favorites?: number;
  /**
   * Biography
   * @nullable
   */
  about?: string | null;
  anime?: PersonFullAnimeItem[];
  manga?: PersonFullMangaItem[];
  voices?: PersonFullVoicesItem[];
}

export type PersonMangaDataItem = {
  /** Person's position */
  position?: string;
  manga?: MangaMeta;
};

/**
 * Person's mangaography
 */
export interface PersonManga {
  data?: PersonMangaDataItem[];
}

/**
 * Person Resource
 */
export interface Person {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /**
   * Person's website URL
   * @nullable
   */
  website_url?: string | null;
  images?: PeopleImages;
  /** Name */
  name?: string;
  /**
   * Given Name
   * @nullable
   */
  given_name?: string | null;
  /**
   * Family Name
   * @nullable
   */
  family_name?: string | null;
  /** Other Names */
  alternate_names?: string[];
  /**
   * Birthday Date ISO8601
   * @nullable
   */
  birthday?: string | null;
  /** Number of users who have favorited this entry */
  favorites?: number;
  /**
   * Biography
   * @nullable
   */
  about?: string | null;
}

export type PersonVoiceActingRolesDataItem = {
  /** Person's Character's role in the anime */
  role?: string;
  anime?: AnimeMeta;
  character?: CharacterMeta;
};

/**
 * Person's voice acting roles
 */
export interface PersonVoiceActingRoles {
  data?: PersonVoiceActingRolesDataItem[];
}

export type PicturesDataItem = {
  images?: AnimeImages;
};

/**
 * Pictures Resource
 */
export interface Pictures {
  data?: PicturesDataItem[];
}

export type PicturesVariantsDataItem = {
  images?: CommonImages;
};

/**
 * Pictures Resource
 */
export interface PicturesVariants {
  data?: PicturesVariantsDataItem[];
}

export type ProducersAllOf = {
  data?: Producer[];
};

/**
 * Producers Collection Resource
 */
export type Producers = ProducersAllOf & Pagination;

export type ProducerFullExternalItem = {
  name?: string;
  url?: string;
};

/**
 * Producers Resource
 */
export interface ProducerFull {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /** All titles */
  titles?: Title[];
  images?: CommonImages;
  /** Producers's member favorites count */
  favorites?: number;
  /** Producers's anime count */
  count?: number;
  /**
   * Established Date ISO8601
   * @nullable
   */
  established?: string | null;
  /**
   * About the Producer
   * @nullable
   */
  about?: string | null;
  external?: ProducerFullExternalItem[];
}

/**
 * Producers Resource
 */
export interface Producer {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList URL */
  url?: string;
  /** All titles */
  titles?: Title[];
  images?: CommonImages;
  /** Producers's member favorites count */
  favorites?: number;
  /** Producers's anime count */
  count?: number;
  /**
   * Established Date ISO8601
   * @nullable
   */
  established?: string | null;
  /**
   * About the Producer
   * @nullable
   */
  about?: string | null;
}

export type UserAboutDataItem = {
  /**
   * User About. NOTE: About information is customizable by users through BBCode on MyAnimeList. This means users can add multimedia content, different text sizes, etc. Due to this freeform, Jikan returns parsed HTML. Validate on your end!
   * @nullable
   */
  about?: string | null;
};

export interface UserAbout {
  data?: UserAboutDataItem[];
}

export type UserFavoritesAnimeItemAllOf = {
  type?: string;
  start_year?: number;
};

export type UserFavoritesAnimeItem = UserFavoritesAnimeItemAllOf & AnimeMeta;

export type UserFavoritesMangaItemAllOf = {
  type?: string;
  start_year?: number;
};

export type UserFavoritesMangaItem = UserFavoritesMangaItemAllOf & MangaMeta;

export type UserFavoritesCharactersItem = CharacterMeta & MalUrl2;

export interface UserFavorites {
  /** Favorite Anime */
  anime?: UserFavoritesAnimeItem[];
  /** Favorite Manga */
  manga?: UserFavoritesMangaItem[];
  /** Favorite Characters */
  characters?: UserFavoritesCharactersItem[];
  /** Favorite People */
  people?: CharacterMeta[];
}

/**
 * Anime Statistics
 */
export type UserProfileFullStatisticsAnime = {
  /** Number of days spent watching Anime */
  days_watched?: number;
  /** Mean Score */
  mean_score?: number;
  /** Anime Watching */
  watching?: number;
  /** Anime Completed */
  completed?: number;
  /** Anime On-Hold */
  on_hold?: number;
  /** Anime Dropped */
  dropped?: number;
  /** Anime Planned to Watch */
  plan_to_watch?: number;
  /** Total Anime entries on User list */
  total_entries?: number;
  /** Anime re-watched */
  rewatched?: number;
  /** Number of Anime Episodes Watched */
  episodes_watched?: number;
};

/**
 * Manga Statistics
 */
export type UserProfileFullStatisticsManga = {
  /** Number of days spent reading Manga */
  days_read?: number;
  /** Mean Score */
  mean_score?: number;
  /** Manga Reading */
  reading?: number;
  /** Manga Completed */
  completed?: number;
  /** Manga On-Hold */
  on_hold?: number;
  /** Manga Dropped */
  dropped?: number;
  /** Manga Planned to Read */
  plan_to_read?: number;
  /** Total Manga entries on User list */
  total_entries?: number;
  /** Manga re-read */
  reread?: number;
  /** Number of Manga Chapters Read */
  chapters_read?: number;
  /** Number of Manga Volumes Read */
  volumes_read?: number;
};

export type UserProfileFullStatistics = {
  /** Anime Statistics */
  anime?: UserProfileFullStatisticsAnime;
  /** Manga Statistics */
  manga?: UserProfileFullStatisticsManga;
};

export type UserProfileFullExternalItem = {
  name?: string;
  url?: string;
};

/**
 * Transform the resource into an array.
 */
export interface UserProfileFull {
  /**
   * MyAnimeList ID
   * @nullable
   */
  mal_id?: number | null;
  /** MyAnimeList Username */
  username?: string;
  /** MyAnimeList URL */
  url?: string;
  images?: UserImages;
  /**
   * Last Online Date ISO8601
   * @nullable
   */
  last_online?: string | null;
  /**
   * User Gender
   * @nullable
   */
  gender?: string | null;
  /**
   * Birthday Date ISO8601
   * @nullable
   */
  birthday?: string | null;
  /**
   * Location
   * @nullable
   */
  location?: string | null;
  /**
   * Joined Date ISO8601
   * @nullable
   */
  joined?: string | null;
  statistics?: UserProfileFullStatistics;
  external?: UserProfileFullExternalItem[];
}

export interface UserHistory {
  data?: History[];
}

/**
 * Transform the resource into an array.
 */
export interface History {
  entry?: MalUrl;
  /** Number of episodes/chapters watched/read */
  increment?: number;
  /** Date ISO8601 */
  date?: string;
}

export type UserUpdatesDataAnimeItemAllOf = {
  entry?: AnimeMeta;
};

export type UserUpdatesDataAnimeItemAllOfTwo = {
  /** @nullable */
  score?: number | null;
  status?: string;
  /** @nullable */
  episodes_seen?: number | null;
  /** @nullable */
  episodes_total?: number | null;
  /** ISO8601 format */
  date?: string;
};

export type UserUpdatesDataAnimeItem = UserUpdatesDataAnimeItemAllOf & UserUpdatesDataAnimeItemAllOfTwo;

export type UserUpdatesDataMangaItemAllOf = {
  entry?: MangaMeta;
};

export type UserUpdatesDataMangaItemAllOfTwo = {
  /** @nullable */
  score?: number | null;
  status?: string;
  /** @nullable */
  chapters_read?: number | null;
  /** @nullable */
  chapters_total?: number | null;
  /** @nullable */
  volumes_read?: number | null;
  /** @nullable */
  volumes_total?: number | null;
  /** ISO8601 format */
  date?: string;
};

export type UserUpdatesDataMangaItem = UserUpdatesDataMangaItemAllOf & UserUpdatesDataMangaItemAllOfTwo;

export type UserUpdatesData = {
  /** Last updated Anime */
  anime?: UserUpdatesDataAnimeItem[];
  /** Last updated Manga */
  manga?: UserUpdatesDataMangaItem[];
};

export interface UserUpdates {
  data?: UserUpdatesData;
}

export interface UserProfile {
  /**
   * MyAnimeList ID
   * @nullable
   */
  mal_id?: number | null;
  /** MyAnimeList Username */
  username?: string;
  /** MyAnimeList URL */
  url?: string;
  images?: UserImages;
  /**
   * Last Online Date ISO8601
   * @nullable
   */
  last_online?: string | null;
  /**
   * User Gender
   * @nullable
   */
  gender?: string | null;
  /**
   * Birthday Date ISO8601
   * @nullable
   */
  birthday?: string | null;
  /**
   * Location
   * @nullable
   */
  location?: string | null;
  /**
   * Joined Date ISO8601
   * @nullable
   */
  joined?: string | null;
}

/**
 * Available images in JPG
 */
export type UsersTempDataItemImagesJpg = {
  /** Image URL JPG (225x335) */
  image_url?: string;
};

/**
 * Available images in WEBP
 */
export type UsersTempDataItemImagesWebp = {
  /** Image URL WEBP (225x335) */
  image_url?: string;
};

/**
 * Images
 */
export type UsersTempDataItemImages = {
  /** Available images in JPG */
  jpg?: UsersTempDataItemImagesJpg;
  /** Available images in WEBP */
  webp?: UsersTempDataItemImagesWebp;
};

/**
 * Anime Stats
 */
export type UsersTempDataItemAnimeStats = {
  /** Number of days spent watching Anime */
  days_watched?: number;
  /** Mean Score */
  mean_score?: number;
  /** Anime Watching */
  watching?: number;
  /** Anime Completed */
  completed?: number;
  /** Anime On-Hold */
  on_hold?: number;
  /** Anime Dropped */
  dropped?: number;
  /** Anime Planned to Watch */
  plan_to_watch?: number;
  /** Total Anime entries on User list */
  total_entries?: number;
  /** Anime re-watched */
  rewatched?: number;
  /** Number of Anime Episodes Watched */
  episodes_watched?: number;
};

/**
 * Manga Stats
 */
export type UsersTempDataItemMangaStats = {
  /** Number of days spent reading Manga */
  days_read?: number;
  /** Mean Score */
  mean_score?: number;
  /** Manga Reading */
  reading?: number;
  /** Manga Completed */
  completed?: number;
  /** Manga On-Hold */
  on_hold?: number;
  /** Manga Dropped */
  dropped?: number;
  /** Manga Planned to Read */
  plan_to_read?: number;
  /** Total Manga entries on User list */
  total_entries?: number;
  /** Manga re-read */
  reread?: number;
  /** Number of Manga Chapters Read */
  chapters_read?: number;
  /** Number of Manga Volumes Read */
  volumes_read?: number;
};

/**
 * Favorite entries
 */
export type UsersTempDataItemFavorites = {
  /** Favorite Anime */
  anime?: EntryMeta[];
  /** Favorite Manga */
  manga?: EntryMeta[];
  /** Favorite Characters */
  characters?: EntryMeta[];
  /** Favorite People */
  people?: EntryMeta[];
};

export type UsersTempDataItem = {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList Username */
  username?: string;
  /** MyAnimeList URL */
  url?: string;
  /** Images */
  images?: UsersTempDataItemImages;
  /** Last Online Date ISO8601 */
  last_online?: string;
  /** User Gender */
  gender?: string;
  /** Birthday Date ISO8601 */
  birthday?: string;
  /** Location */
  location?: string;
  /** Joined Date ISO8601 */
  joined?: string;
  /** Anime Stats */
  anime_stats?: UsersTempDataItemAnimeStats;
  /** Manga Stats */
  manga_stats?: UsersTempDataItemMangaStats;
  /** Favorite entries */
  favorites?: UsersTempDataItemFavorites;
  /** User About. NOTE: About information is customizable by users through BBCode on MyAnimeList. This means users can add multimedia content, different text sizes, etc. Due to this freeform, Jikan returns parsed HTML. Validate on your end! */
  about?: string;
};

/**
 * Transform the resource into an array.
 */
export interface UsersTemp {
  data?: UsersTempDataItem[];
}

/**
 * Anime Statistics
 */
export type UserStatisticsDataAnime = {
  /** Number of days spent watching Anime */
  days_watched?: number;
  /** Mean Score */
  mean_score?: number;
  /** Anime Watching */
  watching?: number;
  /** Anime Completed */
  completed?: number;
  /** Anime On-Hold */
  on_hold?: number;
  /** Anime Dropped */
  dropped?: number;
  /** Anime Planned to Watch */
  plan_to_watch?: number;
  /** Total Anime entries on User list */
  total_entries?: number;
  /** Anime re-watched */
  rewatched?: number;
  /** Number of Anime Episodes Watched */
  episodes_watched?: number;
};

/**
 * Manga Statistics
 */
export type UserStatisticsDataManga = {
  /** Number of days spent reading Manga */
  days_read?: number;
  /** Mean Score */
  mean_score?: number;
  /** Manga Reading */
  reading?: number;
  /** Manga Completed */
  completed?: number;
  /** Manga On-Hold */
  on_hold?: number;
  /** Manga Dropped */
  dropped?: number;
  /** Manga Planned to Read */
  plan_to_read?: number;
  /** Total Manga entries on User list */
  total_entries?: number;
  /** Manga re-read */
  reread?: number;
  /** Number of Manga Chapters Read */
  chapters_read?: number;
  /** Number of Manga Volumes Read */
  volumes_read?: number;
};

export type UserStatisticsData = {
  /** Anime Statistics */
  anime?: UserStatisticsDataAnime;
  /** Manga Statistics */
  manga?: UserStatisticsDataManga;
};

export interface UserStatistics {
  data?: UserStatisticsData;
}

export type RecommendationsAllOfDataItemEntryItem = AnimeMeta | MangaMeta;

export type RecommendationsAllOfDataItem = {
  /** MAL IDs of recommendations is both of the MAL ID's with a `-` delimiter */
  mal_id?: string;
  /** Array of 2 entries that are being recommended to each other */
  entry?: RecommendationsAllOfDataItemEntryItem[];
  /** Recommendation context provided by the user */
  content?: string;
  user?: UserById;
};

export type RecommendationsAllOf = {
  data?: RecommendationsAllOfDataItem[];
};

/**
 * Recommendations
 */
export type Recommendations = RecommendationsAllOf & Pagination;

export type EntryRecommendationsDataItemEntry = AnimeMeta | MangaMeta;

export type EntryRecommendationsDataItem = {
  entry?: EntryRecommendationsDataItemEntry;
};

/**
 * Entry Recommendations Resource
 */
export interface EntryRecommendations {
  data?: EntryRecommendationsDataItem[];
}

/**
 * User reaction count on the review
 */
export type MangaReviewReactions = {
  /** Overall reaction count */
  overall?: number;
  /** Nice reaction count */
  nice?: number;
  /** Love it reaction count */
  love_it?: number;
  /** Funny reaction count */
  funny?: number;
  /** Confusing reaction count */
  confusing?: number;
  /** Informative reaction count */
  informative?: number;
  /** Well written reaction count */
  well_written?: number;
  /** Creative reaction count */
  creative?: number;
};

export interface MangaReview {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList review URL */
  url?: string;
  /** Entry type */
  type?: string;
  /** User reaction count on the review */
  reactions?: MangaReviewReactions;
  /** Review created date ISO8601 */
  date?: string;
  /** Review content */
  review?: string;
  /** Number of user votes on the Review */
  score?: number;
  /** Review tags */
  tags?: string[];
  /** The review contains spoiler */
  is_spoiler?: boolean;
  /** The review was made before the entry was completed */
  is_preliminary?: boolean;
}

/**
 * User reaction count on the review
 */
export type AnimeReviewReactions = {
  /** Overall reaction count */
  overall?: number;
  /** Nice reaction count */
  nice?: number;
  /** Love it reaction count */
  love_it?: number;
  /** Funny reaction count */
  funny?: number;
  /** Confusing reaction count */
  confusing?: number;
  /** Informative reaction count */
  informative?: number;
  /** Well written reaction count */
  well_written?: number;
  /** Creative reaction count */
  creative?: number;
};

export interface AnimeReview {
  /** MyAnimeList ID */
  mal_id?: number;
  /** MyAnimeList review URL */
  url?: string;
  /** Entry type */
  type?: string;
  /** User reaction count on the review */
  reactions?: AnimeReviewReactions;
  /** Review created date ISO8601 */
  date?: string;
  /** Review content */
  review?: string;
  /** Number of user votes on the Review */
  score?: number;
  /** Review tags */
  tags?: string[];
  /** The review contains spoiler */
  is_spoiler?: boolean;
  /** The review was made before the entry was completed */
  is_preliminary?: boolean;
  /** Number of episodes watched */
  episodes_watched?: number;
}

export type AnimeReviewsAllOfDataItemAllOf = {
  user?: UserMeta;
};

export type AnimeReviewsAllOfDataItem = AnimeReviewsAllOfDataItemAllOf & AnimeReview;

export type AnimeReviewsAllOf = {
  data?: AnimeReviewsAllOfDataItem[];
};

/**
 * Anime Reviews Resource
 */
export type AnimeReviews = AnimeReviewsAllOf & Pagination;

export type MangaReviewsAllOfDataItemAllOf = {
  user?: UserMeta;
};

export type MangaReviewsAllOfDataItem = MangaReviewsAllOfDataItemAllOf & MangaReview;

export type MangaReviewsAllOf = {
  data?: MangaReviewsAllOfDataItem[];
};

/**
 * Manga Reviews Resource
 */
export type MangaReviews = MangaReviewsAllOf & Pagination;

export type StreamingLinksDataItem = {
  name?: string;
  url?: string;
};

/**
 * Streaming links
 */
export interface StreamingLinks {
  data?: StreamingLinksDataItem[];
}

export type AnimeUserupdatesAllOfDataItem = {
  user?: UserMeta;
  /**
   * User Score
   * @nullable
   */
  score?: number | null;
  /** User list status */
  status?: string;
  /**
   * Number of episodes seen
   * @nullable
   */
  episodes_seen?: number | null;
  /**
   * Total number of episodes
   * @nullable
   */
  episodes_total?: number | null;
  /** Last updated date ISO8601 */
  date?: string;
};

export type AnimeUserupdatesAllOf = {
  data?: AnimeUserupdatesAllOfDataItem[];
};

/**
 * Anime User Updates Resource
 */
export type AnimeUserupdates = AnimeUserupdatesAllOf & Pagination;

export type MangaUserupdatesAllOfDataItem = {
  user?: UserMeta;
  /**
   * User Score
   * @nullable
   */
  score?: number | null;
  /** User list status */
  status?: string;
  /** Number of volumes read */
  volumes_read?: number;
  /** Total number of volumes */
  volumes_total?: number;
  /** Number of chapters read */
  chapters_read?: number;
  /** Total number of chapters */
  chapters_total?: number;
  /** Last updated date ISO8601 */
  date?: string;
};

export type MangaUserupdatesAllOf = {
  data?: MangaUserupdatesAllOfDataItem[];
};

/**
 * Manga User Updates Resource
 */
export type MangaUserupdates = MangaUserupdatesAllOf & Pagination;

/**
 * Error: Bad request. When required parameters were not supplied.
 */
export type N400Response = void;

/**
 * This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &#8243;TV (continuing)&#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) <br />Example usage: `?continuing`
 */
export type ContinuingParameter = boolean;

/**
 * This is a flag. When supplied it will include entries with the Kids genres in specific endpoints that filter them out by default. You do not need to pass a value to it. e.g usage: `?kids`
 */
export type KidsParameter = boolean;

export type LimitParameter = number;

export type PageParameter = number;

/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
export type PreliminaryParameter = boolean;

/**
 * 'Safe For Work'. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: `?sfw`
 */
export type SfwParameter = boolean;

/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
export type SpoilersParameter = boolean;

/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
export type UnapprovedParameter = boolean;

export type GetAnimeFullById200 = {
  data?: AnimeFull;
};

export type GetAnimeById200 = {
  data?: Anime;
};

export type GetAnimeEpisodesParams = {
page?: PageParameter;
};

export type GetAnimeEpisodeById200 = {
  data?: AnimeEpisode;
};

export type GetAnimeNewsParams = {
page?: PageParameter;
};

export type GetAnimeForumParams = {
/**
 * Filter topics
 */
filter?: GetAnimeForumFilter;
};

export type GetAnimeForumFilter = typeof GetAnimeForumFilter[keyof typeof GetAnimeForumFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAnimeForumFilter = {
  all: 'all',
  episode: 'episode',
  other: 'other',
} as const;

export type GetAnimeVideosEpisodesParams = {
page?: PageParameter;
};

export type GetAnimeUserUpdatesParams = {
page?: PageParameter;
};

export type GetAnimeReviewsParams = {
page?: PageParameter;
/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
preliminary?: PreliminaryParameter;
/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
spoilers?: SpoilersParameter;
};

export type GetAnimeRelations200 = {
  data?: Relation[];
};

export type GetCharacterFullById200 = {
  data?: CharacterFull;
};

export type GetCharacterById200 = {
  data?: Character;
};

export type GetClubsById200 = {
  data?: Club;
};

export type GetClubMembersParams = {
page?: PageParameter;
};

export type GetClubMembers200 = Pagination & ClubMember;

export type GetAnimeGenresParams = {
filter?: GenreQueryFilter;
};

export type GetMangaGenresParams = {
filter?: GenreQueryFilter;
};

export type GetMagazinesParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
order_by?: MagazinesQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetMangaFullById200 = {
  data?: MangaFull;
};

export type GetMangaById200 = {
  data?: Manga;
};

export type GetMangaNewsParams = {
page?: PageParameter;
};

export type GetMangaTopicsParams = {
/**
 * Filter topics
 */
filter?: GetMangaTopicsFilter;
};

export type GetMangaTopicsFilter = typeof GetMangaTopicsFilter[keyof typeof GetMangaTopicsFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMangaTopicsFilter = {
  all: 'all',
  episode: 'episode',
  other: 'other',
} as const;

export type GetMangaUserUpdatesParams = {
page?: PageParameter;
};

export type GetMangaReviewsParams = {
page?: PageParameter;
/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
preliminary?: PreliminaryParameter;
/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
spoilers?: SpoilersParameter;
};

export type GetMangaRelations200 = {
  data?: Relation[];
};

export type GetPersonFullById200 = {
  data?: PersonFull;
};

export type GetPersonById200 = {
  data?: Person;
};

export type GetProducerById200 = {
  data?: Producer;
};

export type GetProducerFullById200 = {
  data?: ProducerFull;
};

export type GetRandomAnime200 = {
  data?: Anime;
};

export type GetRandomManga200 = {
  data?: Manga;
};

export type GetRandomCharacters200 = {
  data?: Character;
};

export type GetRandomPeople200 = {
  data?: Person;
};

export type GetRandomUsers200 = {
  data?: UserProfile;
};

export type GetRecentAnimeRecommendationsParams = {
page?: PageParameter;
};

export type GetRecentMangaRecommendationsParams = {
page?: PageParameter;
};

export type GetRecentAnimeReviewsParams = {
page?: PageParameter;
/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
preliminary?: PreliminaryParameter;
/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
spoilers?: SpoilersParameter;
};

export type GetRecentMangaReviewsParams = {
page?: PageParameter;
/**
 * Any reviews left during an ongoing anime/manga, those reviews are tagged as preliminary. NOTE: Preliminary reviews are not returned by default so if the entry is airing/publishing you need to add this otherwise you will get an empty list. e.g usage: `?preliminary=true`
 */
preliminary?: PreliminaryParameter;
/**
 * Any reviews that are tagged as a spoiler. Spoiler reviews are not returned by default. e.g usage: `?spoiler=true`
 */
spoilers?: SpoilersParameter;
};

export type GetSchedulesParams = {
/**
 * Filter by day
 */
filter?: GetSchedulesFilter;
/**
 * When supplied, it will filter entries with the `Kids` Genre Demographic. When supplied as `kids=true`, it will return only Kid entries and when supplied as `kids=false`, it will filter out any Kid entries. Defaults to `false`.
 */
kids?: GetSchedulesKids;
/**
 * 'Safe For Work'. When supplied, it will filter entries with the `Hentai` Genre. When supplied as `sfw=true`, it will return only SFW entries and when supplied as `sfw=false`, it will filter out any Hentai entries. Defaults to `false`.
 */
sfw?: GetSchedulesSfw;
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetSchedulesFilter = typeof GetSchedulesFilter[keyof typeof GetSchedulesFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSchedulesFilter = {
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday',
  unknown: 'unknown',
  other: 'other',
} as const;

export type GetSchedulesKids = typeof GetSchedulesKids[keyof typeof GetSchedulesKids];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSchedulesKids = {
  true: 'true',
  false: 'false',
} as const;

export type GetSchedulesSfw = typeof GetSchedulesSfw[keyof typeof GetSchedulesSfw];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSchedulesSfw = {
  true: 'true',
  false: 'false',
} as const;

export type GetAnimeSearchParams = {
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
page?: PageParameter;
limit?: LimitParameter;
q?: string;
type?: AnimeSearchQueryType;
score?: number;
/**
 * Set a minimum score for results.
 */
min_score?: number;
/**
 * Set a maximum score for results
 */
max_score?: number;
status?: AnimeSearchQueryStatus;
rating?: AnimeSearchQueryRating;
/**
 * Filter out Adult entries
 */
sfw?: boolean;
/**
 * Filter by genre(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
genres?: string;
/**
 * Exclude genre(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
genres_exclude?: string;
order_by?: AnimeSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
/**
 * Filter by producer(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
producers?: string;
/**
 * Filter by starting date. Format: YYYY-MM-DD. e.g `2022`, `2005-05`, `2005-01-01`
 */
start_date?: string;
/**
 * Filter by ending date. Format: YYYY-MM-DD. e.g `2022`, `2005-05`, `2005-01-01`
 */
end_date?: string;
};

export type GetMangaSearchParams = {
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
page?: PageParameter;
limit?: LimitParameter;
q?: string;
type?: MangaSearchQueryType;
score?: number;
/**
 * Set a minimum score for results.
 */
min_score?: number;
/**
 * Set a maximum score for results
 */
max_score?: number;
status?: MangaSearchQueryStatus;
/**
 * Filter out Adult entries
 */
sfw?: boolean;
/**
 * Filter by genre(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
genres?: string;
/**
 * Exclude genre(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
genres_exclude?: string;
order_by?: MangaSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
/**
 * Filter by magazine(s) IDs. Can pass multiple with a comma as a delimiter. e.g 1,2,3
 */
magazines?: string;
/**
 * Filter by starting date. Format: YYYY-MM-DD. e.g `2022`, `2005-05`, `2005-01-01`
 */
start_date?: string;
/**
 * Filter by ending date. Format: YYYY-MM-DD. e.g `2022`, `2005-05`, `2005-01-01`
 */
end_date?: string;
};

export type GetPeopleSearchParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
order_by?: PeopleSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetCharactersSearchParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
order_by?: CharactersSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetUsersSearchParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
gender?: UsersSearchQueryGender;
location?: string;
maxAge?: number;
minAge?: number;
};

export type GetUserById200 = {
  data?: UserById;
};

export type GetClubsSearchParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
type?: ClubSearchQueryType;
category?: ClubSearchQueryCategory;
order_by?: ClubSearchQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetProducersParams = {
page?: PageParameter;
limit?: LimitParameter;
q?: string;
order_by?: ProducersQueryOrderby;
sort?: SearchQuerySort;
/**
 * Return entries starting with the given letter
 */
letter?: string;
};

export type GetSeasonNowParams = {
/**
 * Entry types
 */
filter?: GetSeasonNowFilter;
/**
 * 'Safe For Work'. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: `?sfw`
 */
sfw?: SfwParameter;
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
/**
 * This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &#8243;TV (continuing)&#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) <br />Example usage: `?continuing`
 */
continuing?: ContinuingParameter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetSeasonNowFilter = typeof GetSeasonNowFilter[keyof typeof GetSeasonNowFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSeasonNowFilter = {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  special: 'special',
  ona: 'ona',
  music: 'music',
} as const;

export type GetSeasonParams = {
/**
 * Entry types
 */
filter?: GetSeasonFilter;
/**
 * 'Safe For Work'. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: `?sfw`
 */
sfw?: SfwParameter;
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
/**
 * This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &#8243;TV (continuing)&#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) <br />Example usage: `?continuing`
 */
continuing?: ContinuingParameter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetSeasonFilter = typeof GetSeasonFilter[keyof typeof GetSeasonFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSeasonFilter = {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  special: 'special',
  ona: 'ona',
  music: 'music',
} as const;

export type GetSeasonUpcomingParams = {
/**
 * Entry types
 */
filter?: GetSeasonUpcomingFilter;
/**
 * 'Safe For Work'. This is a flag. When supplied it will filter out entries according to the SFW Policy. You do not need to pass a value to it. e.g usage: `?sfw`
 */
sfw?: SfwParameter;
/**
 * This is a flag. When supplied it will include entries which are unapproved. Unapproved entries on MyAnimeList are those that are user submitted and have not yet been approved by MAL to show up on other pages. They will have their own specifc pages and are often removed resulting in a 404 error. You do not need to pass a value to it. e.g usage: `?unapproved`
 */
unapproved?: UnapprovedParameter;
/**
 * This is a flag. When supplied it will include entries which are continuing from previous seasons. MAL includes these items on the seasons view in the &#8243;TV (continuing)&#8243; section. (Example: https://myanimelist.net/anime/season/2024/winter) <br />Example usage: `?continuing`
 */
continuing?: ContinuingParameter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetSeasonUpcomingFilter = typeof GetSeasonUpcomingFilter[keyof typeof GetSeasonUpcomingFilter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSeasonUpcomingFilter = {
  tv: 'tv',
  movie: 'movie',
  ova: 'ova',
  special: 'special',
  ona: 'ona',
  music: 'music',
} as const;

export type GetTopAnimeParams = {
type?: AnimeSearchQueryType;
filter?: TopAnimeFilter;
rating?: AnimeSearchQueryRating;
/**
 * Filter out Adult entries
 */
sfw?: boolean;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetTopMangaParams = {
type?: MangaSearchQueryType;
filter?: TopMangaFilter;
page?: PageParameter;
limit?: LimitParameter;
};

export type GetTopPeopleParams = {
page?: PageParameter;
limit?: LimitParameter;
};

export type GetTopCharactersParams = {
page?: PageParameter;
limit?: LimitParameter;
};

export type GetTopReviewsParams = {
page?: PageParameter;
type?: TopReviewsTypeEnum;
/**
 * Whether the results include preliminary reviews or not. Defaults to true.
 */
preliminary?: boolean;
/**
 * Whether the results include reviews with spoilers or not. Defaults to true.
 */
spoilers?: boolean;
};

export type GetTopReviews200DataAllOfDataItemAnyOfAllOf = {
  user?: UserMeta;
};

export type GetTopReviews200DataAllOfDataItemAnyOfAllOfTwo = {
  anime?: AnimeMeta;
};

export type GetTopReviews200DataAllOfDataItemAnyOf = GetTopReviews200DataAllOfDataItemAnyOfAllOf & GetTopReviews200DataAllOfDataItemAnyOfAllOfTwo & AnimeReview;

export type GetTopReviews200DataAllOfDataItemAnyOfFourAllOf = {
  user?: UserMeta;
};

export type GetTopReviews200DataAllOfDataItemAnyOfFourAllOfTwo = {
  manga?: MangaMeta;
};

export type GetTopReviews200DataAllOfDataItemAnyOfFour = GetTopReviews200DataAllOfDataItemAnyOfFourAllOf & GetTopReviews200DataAllOfDataItemAnyOfFourAllOfTwo & MangaReview;

export type GetTopReviews200DataAllOfDataItem = GetTopReviews200DataAllOfDataItemAnyOf | GetTopReviews200DataAllOfDataItemAnyOfFour;

export type GetTopReviews200DataAllOf = {
  data?: GetTopReviews200DataAllOfDataItem[];
};

export type GetTopReviews200Data = GetTopReviews200DataAllOf & Pagination;

export type GetTopReviews200 = {
  data?: GetTopReviews200Data;
};

export type GetUserFullProfile200 = {
  data?: UserProfileFull;
};

export type GetUserProfile200 = {
  data?: UserProfile;
};

export type GetUserFavorites200 = {
  data?: UserFavorites;
};

export type GetUserHistoryParams = {
type?: GetUserHistoryType;
};

export type GetUserHistoryType = typeof GetUserHistoryType[keyof typeof GetUserHistoryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserHistoryType = {
  anime: 'anime',
  manga: 'manga',
} as const;

export type GetUserFriendsParams = {
page?: PageParameter;
};

export type GetUserAnimelistParams = {
status?: UserAnimeListStatusFilter;
};

export type GetUserMangaListParams = {
status?: UserMangaListStatusFilter;
};

export type GetUserReviewsParams = {
page?: PageParameter;
};

export type GetUserReviews200DataAllOfDataItemAnyOfAllOf = {
  user?: UserMeta;
};

export type GetUserReviews200DataAllOfDataItemAnyOfAllOfTwo = {
  anime?: AnimeMeta;
};

export type GetUserReviews200DataAllOfDataItemAnyOf = GetUserReviews200DataAllOfDataItemAnyOfAllOf & GetUserReviews200DataAllOfDataItemAnyOfAllOfTwo & AnimeReview;

export type GetUserReviews200DataAllOfDataItemAnyOfFourAllOf = {
  user?: UserMeta;
};

export type GetUserReviews200DataAllOfDataItemAnyOfFourAllOfTwo = {
  manga?: MangaMeta;
};

export type GetUserReviews200DataAllOfDataItemAnyOfFour = GetUserReviews200DataAllOfDataItemAnyOfFourAllOf & GetUserReviews200DataAllOfDataItemAnyOfFourAllOfTwo & MangaReview;

export type GetUserReviews200DataAllOfDataItem = GetUserReviews200DataAllOfDataItemAnyOf | GetUserReviews200DataAllOfDataItemAnyOfFour;

export type GetUserReviews200DataAllOf = {
  data?: GetUserReviews200DataAllOfDataItem[];
};

export type GetUserReviews200Data = GetUserReviews200DataAllOf & Pagination;

export type GetUserReviews200 = {
  data?: GetUserReviews200Data;
};

export type GetUserRecommendationsParams = {
page?: PageParameter;
};

export type GetUserClubsParams = {
page?: PageParameter;
};

export type GetWatchRecentPromosParams = {
page?: PageParameter;
};




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const getAnimeFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetAnimeFullById200>(
      {url: `/anime/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getAnimeById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetAnimeById200>(
      {url: `/anime/${id}`, method: 'GET'
    },
      options);
    }
  
export const getAnimeCharacters = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeCharacters>(
      {url: `/anime/${id}/characters`, method: 'GET'
    },
      options);
    }
  
export const getAnimeStaff = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeStaff>(
      {url: `/anime/${id}/staff`, method: 'GET'
    },
      options);
    }
  
export const getAnimeEpisodes = (
    id: number,
    params?: GetAnimeEpisodesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeEpisodes>(
      {url: `/anime/${id}/episodes`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeEpisodeById = (
    id: number,
    episode: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetAnimeEpisodeById200>(
      {url: `/anime/${id}/episodes/${episode}`, method: 'GET'
    },
      options);
    }
  
export const getAnimeNews = (
    id: number,
    params?: GetAnimeNewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeNews>(
      {url: `/anime/${id}/news`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeForum = (
    id: number,
    params?: GetAnimeForumParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Forum>(
      {url: `/anime/${id}/forum`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeVideos = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeVideos>(
      {url: `/anime/${id}/videos`, method: 'GET'
    },
      options);
    }
  
export const getAnimeVideosEpisodes = (
    id: number,
    params?: GetAnimeVideosEpisodesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeVideosEpisodes>(
      {url: `/anime/${id}/videos/episodes`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimePictures = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PicturesVariants>(
      {url: `/anime/${id}/pictures`, method: 'GET'
    },
      options);
    }
  
export const getAnimeStatistics = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeStatistics>(
      {url: `/anime/${id}/statistics`, method: 'GET'
    },
      options);
    }
  
export const getAnimeMoreInfo = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Moreinfo>(
      {url: `/anime/${id}/moreinfo`, method: 'GET'
    },
      options);
    }
  
export const getAnimeRecommendations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<EntryRecommendations>(
      {url: `/anime/${id}/recommendations`, method: 'GET'
    },
      options);
    }
  
export const getAnimeUserUpdates = (
    id: number,
    params?: GetAnimeUserUpdatesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeUserupdates>(
      {url: `/anime/${id}/userupdates`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeReviews = (
    id: number,
    params?: GetAnimeReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeReviews>(
      {url: `/anime/${id}/reviews`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeRelations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetAnimeRelations200>(
      {url: `/anime/${id}/relations`, method: 'GET'
    },
      options);
    }
  
export const getAnimeThemes = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeThemes>(
      {url: `/anime/${id}/themes`, method: 'GET'
    },
      options);
    }
  
export const getAnimeExternal = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/anime/${id}/external`, method: 'GET'
    },
      options);
    }
  
export const getAnimeStreaming = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/anime/${id}/streaming`, method: 'GET'
    },
      options);
    }
  
export const getCharacterFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetCharacterFullById200>(
      {url: `/characters/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getCharacterById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetCharacterById200>(
      {url: `/characters/${id}`, method: 'GET'
    },
      options);
    }
  
export const getCharacterAnime = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharacterAnime>(
      {url: `/characters/${id}/anime`, method: 'GET'
    },
      options);
    }
  
export const getCharacterManga = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharacterManga>(
      {url: `/characters/${id}/manga`, method: 'GET'
    },
      options);
    }
  
export const getCharacterVoiceActors = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharacterVoiceActors>(
      {url: `/characters/${id}/voices`, method: 'GET'
    },
      options);
    }
  
export const getCharacterPictures = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharacterPictures>(
      {url: `/characters/${id}/pictures`, method: 'GET'
    },
      options);
    }
  
export const getClubsById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetClubsById200>(
      {url: `/clubs/${id}`, method: 'GET'
    },
      options);
    }
  
export const getClubMembers = (
    id: number,
    params?: GetClubMembersParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetClubMembers200>(
      {url: `/clubs/${id}/members`, method: 'GET',
        params
    },
      options);
    }
  
export const getClubStaff = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ClubStaff>(
      {url: `/clubs/${id}/staff`, method: 'GET'
    },
      options);
    }
  
export const getClubRelations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ClubRelations>(
      {url: `/clubs/${id}/relations`, method: 'GET'
    },
      options);
    }
  
export const getAnimeGenres = (
    params?: GetAnimeGenresParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Genres>(
      {url: `/genres/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaGenres = (
    params?: GetMangaGenresParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Genres>(
      {url: `/genres/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getMagazines = (
    params?: GetMagazinesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Magazines>(
      {url: `/magazines`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetMangaFullById200>(
      {url: `/manga/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getMangaById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetMangaById200>(
      {url: `/manga/${id}`, method: 'GET'
    },
      options);
    }
  
export const getMangaCharacters = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaCharacters>(
      {url: `/manga/${id}/characters`, method: 'GET'
    },
      options);
    }
  
export const getMangaNews = (
    id: number,
    params?: GetMangaNewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaNews>(
      {url: `/manga/${id}/news`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaTopics = (
    id: number,
    params?: GetMangaTopicsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Forum>(
      {url: `/manga/${id}/forum`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaPictures = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaPictures>(
      {url: `/manga/${id}/pictures`, method: 'GET'
    },
      options);
    }
  
export const getMangaStatistics = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaStatistics>(
      {url: `/manga/${id}/statistics`, method: 'GET'
    },
      options);
    }
  
export const getMangaMoreInfo = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Moreinfo>(
      {url: `/manga/${id}/moreinfo`, method: 'GET'
    },
      options);
    }
  
export const getMangaRecommendations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<EntryRecommendations>(
      {url: `/manga/${id}/recommendations`, method: 'GET'
    },
      options);
    }
  
export const getMangaUserUpdates = (
    id: number,
    params?: GetMangaUserUpdatesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaUserupdates>(
      {url: `/manga/${id}/userupdates`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaReviews = (
    id: number,
    params?: GetMangaReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaReviews>(
      {url: `/manga/${id}/reviews`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaRelations = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetMangaRelations200>(
      {url: `/manga/${id}/relations`, method: 'GET'
    },
      options);
    }
  
export const getMangaExternal = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/manga/${id}/external`, method: 'GET'
    },
      options);
    }
  
export const getPersonFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetPersonFullById200>(
      {url: `/people/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getPersonById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetPersonById200>(
      {url: `/people/${id}`, method: 'GET'
    },
      options);
    }
  
export const getPersonAnime = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PersonAnime>(
      {url: `/people/${id}/anime`, method: 'GET'
    },
      options);
    }
  
export const getPersonVoices = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PersonVoiceActingRoles>(
      {url: `/people/${id}/voices`, method: 'GET'
    },
      options);
    }
  
export const getPersonManga = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PersonManga>(
      {url: `/people/${id}/manga`, method: 'GET'
    },
      options);
    }
  
export const getPersonPictures = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PersonPictures>(
      {url: `/people/${id}/pictures`, method: 'GET'
    },
      options);
    }
  
export const getProducerById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetProducerById200>(
      {url: `/producers/${id}`, method: 'GET'
    },
      options);
    }
  
export const getProducerFullById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetProducerFullById200>(
      {url: `/producers/${id}/full`, method: 'GET'
    },
      options);
    }
  
export const getProducerExternal = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/producers/${id}/external`, method: 'GET'
    },
      options);
    }
  
export const getRandomAnime = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomAnime200>(
      {url: `/random/anime`, method: 'GET'
    },
      options);
    }
  
export const getRandomManga = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomManga200>(
      {url: `/random/manga`, method: 'GET'
    },
      options);
    }
  
export const getRandomCharacters = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomCharacters200>(
      {url: `/random/characters`, method: 'GET'
    },
      options);
    }
  
export const getRandomPeople = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomPeople200>(
      {url: `/random/people`, method: 'GET'
    },
      options);
    }
  
export const getRandomUsers = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetRandomUsers200>(
      {url: `/random/users`, method: 'GET'
    },
      options);
    }
  
export const getRecentAnimeRecommendations = (
    params?: GetRecentAnimeRecommendationsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Recommendations>(
      {url: `/recommendations/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getRecentMangaRecommendations = (
    params?: GetRecentMangaRecommendationsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Recommendations>(
      {url: `/recommendations/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getRecentAnimeReviews = (
    params?: GetRecentAnimeReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<unknown>(
      {url: `/reviews/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getRecentMangaReviews = (
    params?: GetRecentMangaReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<unknown>(
      {url: `/reviews/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getSchedules = (
    params?: GetSchedulesParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Schedules>(
      {url: `/schedules`, method: 'GET',
        params
    },
      options);
    }
  
export const getAnimeSearch = (
    params?: GetAnimeSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getMangaSearch = (
    params?: GetMangaSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaSearch>(
      {url: `/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getPeopleSearch = (
    params?: GetPeopleSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PeopleSearch>(
      {url: `/people`, method: 'GET',
        params
    },
      options);
    }
  
export const getCharactersSearch = (
    params?: GetCharactersSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharactersSearch>(
      {url: `/characters`, method: 'GET',
        params
    },
      options);
    }
  
export const getUsersSearch = (
    params?: GetUsersSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UsersSearch>(
      {url: `/users`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserById = (
    id: number,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserById200>(
      {url: `/users/userbyid/${id}`, method: 'GET'
    },
      options);
    }
  
export const getClubsSearch = (
    params?: GetClubsSearchParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ClubsSearch>(
      {url: `/clubs`, method: 'GET',
        params
    },
      options);
    }
  
export const getProducers = (
    params?: GetProducersParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Producers>(
      {url: `/producers`, method: 'GET',
        params
    },
      options);
    }
  
export const getSeasonNow = (
    params?: GetSeasonNowParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/seasons/now`, method: 'GET',
        params
    },
      options);
    }
  
export const getSeason = (
    year: number,
    season: string,
    params?: GetSeasonParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/seasons/${year}/${season}`, method: 'GET',
        params
    },
      options);
    }
  
export const getSeasonsList = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Seasons>(
      {url: `/seasons`, method: 'GET'
    },
      options);
    }
  
export const getSeasonUpcoming = (
    params?: GetSeasonUpcomingParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/seasons/upcoming`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopAnime = (
    params?: GetTopAnimeParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<AnimeSearch>(
      {url: `/top/anime`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopManga = (
    params?: GetTopMangaParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<MangaSearch>(
      {url: `/top/manga`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopPeople = (
    params?: GetTopPeopleParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<PeopleSearch>(
      {url: `/top/people`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopCharacters = (
    params?: GetTopCharactersParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<CharactersSearch>(
      {url: `/top/characters`, method: 'GET',
        params
    },
      options);
    }
  
export const getTopReviews = (
    params?: GetTopReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetTopReviews200>(
      {url: `/top/reviews`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserFullProfile = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserFullProfile200>(
      {url: `/users/${username}/full`, method: 'GET'
    },
      options);
    }
  
export const getUserProfile = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserProfile200>(
      {url: `/users/${username}`, method: 'GET'
    },
      options);
    }
  
export const getUserStatistics = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserStatistics>(
      {url: `/users/${username}/statistics`, method: 'GET'
    },
      options);
    }
  
export const getUserFavorites = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserFavorites200>(
      {url: `/users/${username}/favorites`, method: 'GET'
    },
      options);
    }
  
export const getUserUpdates = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserUpdates>(
      {url: `/users/${username}/userupdates`, method: 'GET'
    },
      options);
    }
  
export const getUserAbout = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserAbout>(
      {url: `/users/${username}/about`, method: 'GET'
    },
      options);
    }
  
export const getUserHistory = (
    username: string,
    params?: GetUserHistoryParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserHistory>(
      {url: `/users/${username}/history`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserFriends = (
    username: string,
    params?: GetUserFriendsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserFriends>(
      {url: `/users/${username}/friends`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * User Anime lists have been discontinued since May 1st, 2022. <a href='https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A'>Read more</a>
 * @deprecated
 */
export const getUserAnimelist = (
    username: string,
    params?: GetUserAnimelistParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<unknown>(
      {url: `/users/${username}/animelist`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * User Manga lists have been discontinued since May 1st, 2022. <a href='https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A'>Read more</a>
 * @deprecated
 */
export const getUserMangaList = (
    username: string,
    params?: GetUserMangaListParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<unknown>(
      {url: `/users/${username}/mangalist`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserReviews = (
    username: string,
    params?: GetUserReviewsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<GetUserReviews200>(
      {url: `/users/${username}/reviews`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserRecommendations = (
    username: string,
    params?: GetUserRecommendationsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<Recommendations>(
      {url: `/users/${username}/recommendations`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserClubs = (
    username: string,
    params?: GetUserClubsParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<UserClubs>(
      {url: `/users/${username}/clubs`, method: 'GET',
        params
    },
      options);
    }
  
export const getUserExternal = (
    username: string,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<ExternalLinks>(
      {url: `/users/${username}/external`, method: 'GET'
    },
      options);
    }
  
export const getWatchRecentEpisodes = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<WatchEpisodes>(
      {url: `/watch/episodes`, method: 'GET'
    },
      options);
    }
  
export const getWatchPopularEpisodes = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<WatchEpisodes>(
      {url: `/watch/episodes/popular`, method: 'GET'
    },
      options);
    }
  
export const getWatchRecentPromos = (
    params?: GetWatchRecentPromosParams,
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<WatchPromos>(
      {url: `/watch/promos`, method: 'GET',
        params
    },
      options);
    }
  
export const getWatchPopularPromos = (
    
 options?: SecondParameter<typeof jikanInstance>,) => {
      return jikanInstance<WatchPromos>(
      {url: `/watch/promos/popular`, method: 'GET'
    },
      options);
    }
  
export type GetAnimeFullByIdResult = NonNullable<Awaited<ReturnType<typeof getAnimeFullById>>>
export type GetAnimeByIdResult = NonNullable<Awaited<ReturnType<typeof getAnimeById>>>
export type GetAnimeCharactersResult = NonNullable<Awaited<ReturnType<typeof getAnimeCharacters>>>
export type GetAnimeStaffResult = NonNullable<Awaited<ReturnType<typeof getAnimeStaff>>>
export type GetAnimeEpisodesResult = NonNullable<Awaited<ReturnType<typeof getAnimeEpisodes>>>
export type GetAnimeEpisodeByIdResult = NonNullable<Awaited<ReturnType<typeof getAnimeEpisodeById>>>
export type GetAnimeNewsResult = NonNullable<Awaited<ReturnType<typeof getAnimeNews>>>
export type GetAnimeForumResult = NonNullable<Awaited<ReturnType<typeof getAnimeForum>>>
export type GetAnimeVideosResult = NonNullable<Awaited<ReturnType<typeof getAnimeVideos>>>
export type GetAnimeVideosEpisodesResult = NonNullable<Awaited<ReturnType<typeof getAnimeVideosEpisodes>>>
export type GetAnimePicturesResult = NonNullable<Awaited<ReturnType<typeof getAnimePictures>>>
export type GetAnimeStatisticsResult = NonNullable<Awaited<ReturnType<typeof getAnimeStatistics>>>
export type GetAnimeMoreInfoResult = NonNullable<Awaited<ReturnType<typeof getAnimeMoreInfo>>>
export type GetAnimeRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getAnimeRecommendations>>>
export type GetAnimeUserUpdatesResult = NonNullable<Awaited<ReturnType<typeof getAnimeUserUpdates>>>
export type GetAnimeReviewsResult = NonNullable<Awaited<ReturnType<typeof getAnimeReviews>>>
export type GetAnimeRelationsResult = NonNullable<Awaited<ReturnType<typeof getAnimeRelations>>>
export type GetAnimeThemesResult = NonNullable<Awaited<ReturnType<typeof getAnimeThemes>>>
export type GetAnimeExternalResult = NonNullable<Awaited<ReturnType<typeof getAnimeExternal>>>
export type GetAnimeStreamingResult = NonNullable<Awaited<ReturnType<typeof getAnimeStreaming>>>
export type GetCharacterFullByIdResult = NonNullable<Awaited<ReturnType<typeof getCharacterFullById>>>
export type GetCharacterByIdResult = NonNullable<Awaited<ReturnType<typeof getCharacterById>>>
export type GetCharacterAnimeResult = NonNullable<Awaited<ReturnType<typeof getCharacterAnime>>>
export type GetCharacterMangaResult = NonNullable<Awaited<ReturnType<typeof getCharacterManga>>>
export type GetCharacterVoiceActorsResult = NonNullable<Awaited<ReturnType<typeof getCharacterVoiceActors>>>
export type GetCharacterPicturesResult = NonNullable<Awaited<ReturnType<typeof getCharacterPictures>>>
export type GetClubsByIdResult = NonNullable<Awaited<ReturnType<typeof getClubsById>>>
export type GetClubMembersResult = NonNullable<Awaited<ReturnType<typeof getClubMembers>>>
export type GetClubStaffResult = NonNullable<Awaited<ReturnType<typeof getClubStaff>>>
export type GetClubRelationsResult = NonNullable<Awaited<ReturnType<typeof getClubRelations>>>
export type GetAnimeGenresResult = NonNullable<Awaited<ReturnType<typeof getAnimeGenres>>>
export type GetMangaGenresResult = NonNullable<Awaited<ReturnType<typeof getMangaGenres>>>
export type GetMagazinesResult = NonNullable<Awaited<ReturnType<typeof getMagazines>>>
export type GetMangaFullByIdResult = NonNullable<Awaited<ReturnType<typeof getMangaFullById>>>
export type GetMangaByIdResult = NonNullable<Awaited<ReturnType<typeof getMangaById>>>
export type GetMangaCharactersResult = NonNullable<Awaited<ReturnType<typeof getMangaCharacters>>>
export type GetMangaNewsResult = NonNullable<Awaited<ReturnType<typeof getMangaNews>>>
export type GetMangaTopicsResult = NonNullable<Awaited<ReturnType<typeof getMangaTopics>>>
export type GetMangaPicturesResult = NonNullable<Awaited<ReturnType<typeof getMangaPictures>>>
export type GetMangaStatisticsResult = NonNullable<Awaited<ReturnType<typeof getMangaStatistics>>>
export type GetMangaMoreInfoResult = NonNullable<Awaited<ReturnType<typeof getMangaMoreInfo>>>
export type GetMangaRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getMangaRecommendations>>>
export type GetMangaUserUpdatesResult = NonNullable<Awaited<ReturnType<typeof getMangaUserUpdates>>>
export type GetMangaReviewsResult = NonNullable<Awaited<ReturnType<typeof getMangaReviews>>>
export type GetMangaRelationsResult = NonNullable<Awaited<ReturnType<typeof getMangaRelations>>>
export type GetMangaExternalResult = NonNullable<Awaited<ReturnType<typeof getMangaExternal>>>
export type GetPersonFullByIdResult = NonNullable<Awaited<ReturnType<typeof getPersonFullById>>>
export type GetPersonByIdResult = NonNullable<Awaited<ReturnType<typeof getPersonById>>>
export type GetPersonAnimeResult = NonNullable<Awaited<ReturnType<typeof getPersonAnime>>>
export type GetPersonVoicesResult = NonNullable<Awaited<ReturnType<typeof getPersonVoices>>>
export type GetPersonMangaResult = NonNullable<Awaited<ReturnType<typeof getPersonManga>>>
export type GetPersonPicturesResult = NonNullable<Awaited<ReturnType<typeof getPersonPictures>>>
export type GetProducerByIdResult = NonNullable<Awaited<ReturnType<typeof getProducerById>>>
export type GetProducerFullByIdResult = NonNullable<Awaited<ReturnType<typeof getProducerFullById>>>
export type GetProducerExternalResult = NonNullable<Awaited<ReturnType<typeof getProducerExternal>>>
export type GetRandomAnimeResult = NonNullable<Awaited<ReturnType<typeof getRandomAnime>>>
export type GetRandomMangaResult = NonNullable<Awaited<ReturnType<typeof getRandomManga>>>
export type GetRandomCharactersResult = NonNullable<Awaited<ReturnType<typeof getRandomCharacters>>>
export type GetRandomPeopleResult = NonNullable<Awaited<ReturnType<typeof getRandomPeople>>>
export type GetRandomUsersResult = NonNullable<Awaited<ReturnType<typeof getRandomUsers>>>
export type GetRecentAnimeRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getRecentAnimeRecommendations>>>
export type GetRecentMangaRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getRecentMangaRecommendations>>>
export type GetRecentAnimeReviewsResult = NonNullable<Awaited<ReturnType<typeof getRecentAnimeReviews>>>
export type GetRecentMangaReviewsResult = NonNullable<Awaited<ReturnType<typeof getRecentMangaReviews>>>
export type GetSchedulesResult = NonNullable<Awaited<ReturnType<typeof getSchedules>>>
export type GetAnimeSearchResult = NonNullable<Awaited<ReturnType<typeof getAnimeSearch>>>
export type GetMangaSearchResult = NonNullable<Awaited<ReturnType<typeof getMangaSearch>>>
export type GetPeopleSearchResult = NonNullable<Awaited<ReturnType<typeof getPeopleSearch>>>
export type GetCharactersSearchResult = NonNullable<Awaited<ReturnType<typeof getCharactersSearch>>>
export type GetUsersSearchResult = NonNullable<Awaited<ReturnType<typeof getUsersSearch>>>
export type GetUserByIdResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>
export type GetClubsSearchResult = NonNullable<Awaited<ReturnType<typeof getClubsSearch>>>
export type GetProducersResult = NonNullable<Awaited<ReturnType<typeof getProducers>>>
export type GetSeasonNowResult = NonNullable<Awaited<ReturnType<typeof getSeasonNow>>>
export type GetSeasonResult = NonNullable<Awaited<ReturnType<typeof getSeason>>>
export type GetSeasonsListResult = NonNullable<Awaited<ReturnType<typeof getSeasonsList>>>
export type GetSeasonUpcomingResult = NonNullable<Awaited<ReturnType<typeof getSeasonUpcoming>>>
export type GetTopAnimeResult = NonNullable<Awaited<ReturnType<typeof getTopAnime>>>
export type GetTopMangaResult = NonNullable<Awaited<ReturnType<typeof getTopManga>>>
export type GetTopPeopleResult = NonNullable<Awaited<ReturnType<typeof getTopPeople>>>
export type GetTopCharactersResult = NonNullable<Awaited<ReturnType<typeof getTopCharacters>>>
export type GetTopReviewsResult = NonNullable<Awaited<ReturnType<typeof getTopReviews>>>
export type GetUserFullProfileResult = NonNullable<Awaited<ReturnType<typeof getUserFullProfile>>>
export type GetUserProfileResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserStatisticsResult = NonNullable<Awaited<ReturnType<typeof getUserStatistics>>>
export type GetUserFavoritesResult = NonNullable<Awaited<ReturnType<typeof getUserFavorites>>>
export type GetUserUpdatesResult = NonNullable<Awaited<ReturnType<typeof getUserUpdates>>>
export type GetUserAboutResult = NonNullable<Awaited<ReturnType<typeof getUserAbout>>>
export type GetUserHistoryResult = NonNullable<Awaited<ReturnType<typeof getUserHistory>>>
export type GetUserFriendsResult = NonNullable<Awaited<ReturnType<typeof getUserFriends>>>
export type GetUserAnimelistResult = NonNullable<Awaited<ReturnType<typeof getUserAnimelist>>>
export type GetUserMangaListResult = NonNullable<Awaited<ReturnType<typeof getUserMangaList>>>
export type GetUserReviewsResult = NonNullable<Awaited<ReturnType<typeof getUserReviews>>>
export type GetUserRecommendationsResult = NonNullable<Awaited<ReturnType<typeof getUserRecommendations>>>
export type GetUserClubsResult = NonNullable<Awaited<ReturnType<typeof getUserClubs>>>
export type GetUserExternalResult = NonNullable<Awaited<ReturnType<typeof getUserExternal>>>
export type GetWatchRecentEpisodesResult = NonNullable<Awaited<ReturnType<typeof getWatchRecentEpisodes>>>
export type GetWatchPopularEpisodesResult = NonNullable<Awaited<ReturnType<typeof getWatchPopularEpisodes>>>
export type GetWatchRecentPromosResult = NonNullable<Awaited<ReturnType<typeof getWatchRecentPromos>>>
export type GetWatchPopularPromosResult = NonNullable<Awaited<ReturnType<typeof getWatchPopularPromos>>>
